//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MediaWikiParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DevToolsX.Documents.Compilers.MediaWiki.Syntax.InternalSyntax {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class MediaWikiParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		THorizontalLine=1, THeading=2, TDefinitionStart=3, TListStart=4, TSpaceBlockStart=5, 
		TTableStart=6, TFormat=7, TLinkStart=8, TExternalLinkStart=9, TTemplateParamStart=10, 
		TTemplateStart=11, THtmlComment=12, TNoWiki=13, THtmlScript=14, THtmlStyle=15, 
		TEndTagStart=16, TTagStart=17, TNormalText=18, TComma=19, TWhiteSpace=20, 
		UTF8BOM=21, CRLF=22, TBar=23, TExclamation=24, TApos=25, TSpecialChars=26, 
		TLinkEnd=27, TExternalLinkEnd=28, TTemplateParamEnd=29, TTemplateEnd=30, 
		TBarBar=31, TExclExcl=32, TColon=33, TEntityRef=34, TCharRef=35, TTagEnd=36, 
		TTagCloseEnd=37, TAttributeEquals=38, TTagName=39, TAttributeValue=40, 
		TEndTagEnd=41, TTableEnd=42, TTableCaptionStart=43, TTableRowStart=44, 
		TTextLine_RefStart=45;
	public const int
		RULE_main = 0, RULE_specialBlockOrParagraph = 1, RULE_specialBlockWithComment = 2, 
		RULE_specialBlock = 3, RULE_heading = 4, RULE_headingLevel = 5, RULE_horizontalRule = 6, 
		RULE_codeBlock = 7, RULE_spaceBlock = 8, RULE_wikiList = 9, RULE_listItem = 10, 
		RULE_normalListItem = 11, RULE_definitionItem = 12, RULE_wikiTable = 13, 
		RULE_tableCaption = 14, RULE_tableRows = 15, RULE_tableFirstRow = 16, 
		RULE_tableRow = 17, RULE_tableColumn = 18, RULE_tableSingleHeaderCell = 19, 
		RULE_tableHeaderCells = 20, RULE_tableSingleCell = 21, RULE_tableCells = 22, 
		RULE_tableCell = 23, RULE_cellValue = 24, RULE_paragraph = 25, RULE_textLine = 26, 
		RULE_textElements = 27, RULE_inlineText = 28, RULE_inlineTextElementWithComment = 29, 
		RULE_inlineTextElement = 30, RULE_inlineTextElements = 31, RULE_definitionText = 32, 
		RULE_definitionTextElementWithComment = 33, RULE_definitionTextElement = 34, 
		RULE_definitionTextElements = 35, RULE_headingText = 36, RULE_headingTextWithComment = 37, 
		RULE_headingTextElement = 38, RULE_headingTextElements = 39, RULE_cellText = 40, 
		RULE_cellTextElementWithComment = 41, RULE_cellTextElement = 42, RULE_cellTextElements = 43, 
		RULE_linkText = 44, RULE_linkTextWithComment = 45, RULE_linkTextElement = 46, 
		RULE_linkTextElements = 47, RULE_wikiFormat = 48, RULE_wikiLink = 49, 
		RULE_wikiInternalLink = 50, RULE_wikiExternalLink = 51, RULE_wikiTemplate = 52, 
		RULE_wikiTemplateParam = 53, RULE_noWiki = 54, RULE_barOrBarBar = 55, 
		RULE_linkTextPart = 56, RULE_htmlReference = 57, RULE_htmlCommentList = 58, 
		RULE_htmlComment = 59, RULE_htmlStyle = 60, RULE_htmlScript = 61, RULE_htmlTag = 62, 
		RULE_htmlTagOpen = 63, RULE_htmlTagClose = 64, RULE_htmlTagEmpty = 65, 
		RULE_htmlAttribute = 66, RULE_htmlAttributeName = 67, RULE_htmlAttributeValue = 68, 
		RULE_htmlTagName = 69, RULE_whitespaceList = 70, RULE_whitespace = 71;
	public static readonly string[] ruleNames = {
		"main", "specialBlockOrParagraph", "specialBlockWithComment", "specialBlock", 
		"heading", "headingLevel", "horizontalRule", "codeBlock", "spaceBlock", 
		"wikiList", "listItem", "normalListItem", "definitionItem", "wikiTable", 
		"tableCaption", "tableRows", "tableFirstRow", "tableRow", "tableColumn", 
		"tableSingleHeaderCell", "tableHeaderCells", "tableSingleCell", "tableCells", 
		"tableCell", "cellValue", "paragraph", "textLine", "textElements", "inlineText", 
		"inlineTextElementWithComment", "inlineTextElement", "inlineTextElements", 
		"definitionText", "definitionTextElementWithComment", "definitionTextElement", 
		"definitionTextElements", "headingText", "headingTextWithComment", "headingTextElement", 
		"headingTextElements", "cellText", "cellTextElementWithComment", "cellTextElement", 
		"cellTextElements", "linkText", "linkTextWithComment", "linkTextElement", 
		"linkTextElements", "wikiFormat", "wikiLink", "wikiInternalLink", "wikiExternalLink", 
		"wikiTemplate", "wikiTemplateParam", "noWiki", "barOrBarBar", "linkTextPart", 
		"htmlReference", "htmlCommentList", "htmlComment", "htmlStyle", "htmlScript", 
		"htmlTag", "htmlTagOpen", "htmlTagClose", "htmlTagEmpty", "htmlAttribute", 
		"htmlAttributeName", "htmlAttributeValue", "htmlTagName", "whitespaceList", 
		"whitespace"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "' '", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'!'", null, null, "']]'", "']'", "'}}}'", "'}}'", "'||'", "'!!'", "':'", 
		null, null, null, "'/>'", "'='", null, null, null, "'|}'", "'|+'", "'|-'", 
		"'&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "THorizontalLine", "THeading", "TDefinitionStart", "TListStart", 
		"TSpaceBlockStart", "TTableStart", "TFormat", "TLinkStart", "TExternalLinkStart", 
		"TTemplateParamStart", "TTemplateStart", "THtmlComment", "TNoWiki", "THtmlScript", 
		"THtmlStyle", "TEndTagStart", "TTagStart", "TNormalText", "TComma", "TWhiteSpace", 
		"UTF8BOM", "CRLF", "TBar", "TExclamation", "TApos", "TSpecialChars", "TLinkEnd", 
		"TExternalLinkEnd", "TTemplateParamEnd", "TTemplateEnd", "TBarBar", "TExclExcl", 
		"TColon", "TEntityRef", "TCharRef", "TTagEnd", "TTagCloseEnd", "TAttributeEquals", 
		"TTagName", "TAttributeValue", "TEndTagEnd", "TTableEnd", "TTableCaptionStart", 
		"TTableRowStart", "TTextLine_RefStart"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MediaWikiParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MediaWikiParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    bool isSpecialToken() {
	    	String name = this.CurrentToken.Text;
	    	if (name == " " || name.StartsWith("-") || name.StartsWith("=") || name.StartsWith("#") ||
	    	    name.StartsWith("*") || name.StartsWith(":") || name.StartsWith(";") || name.StartsWith("{|") ||
	    	    name.StartsWith("|+") || name.StartsWith("|-") || name.StartsWith("|}") || name.StartsWith("|") ||
	    	    name.StartsWith("!")) return true;
	        return false;
	    }

		public MediaWikiParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MediaWikiParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class MainContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MediaWikiParser.Eof, 0); }
		public SpecialBlockOrParagraphContext[] specialBlockOrParagraph() {
			return GetRuleContexts<SpecialBlockOrParagraphContext>();
		}
		public SpecialBlockOrParagraphContext specialBlockOrParagraph(int i) {
			return GetRuleContext<SpecialBlockOrParagraphContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 144; specialBlockOrParagraph();
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 150; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialBlockOrParagraphContext : ParserRuleContext {
		public SpecialBlockWithCommentContext specialBlockWithComment() {
			return GetRuleContext<SpecialBlockWithCommentContext>(0);
		}
		public ParagraphContext paragraph() {
			return GetRuleContext<ParagraphContext>(0);
		}
		public SpecialBlockOrParagraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialBlockOrParagraph; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterSpecialBlockOrParagraph(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitSpecialBlockOrParagraph(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialBlockOrParagraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialBlockOrParagraphContext specialBlockOrParagraph() {
		SpecialBlockOrParagraphContext _localctx = new SpecialBlockOrParagraphContext(Context, State);
		EnterRule(_localctx, 2, RULE_specialBlockOrParagraph);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; specialBlockWithComment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153; paragraph();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialBlockWithCommentContext : ParserRuleContext {
		public HtmlCommentListContext leadingComment;
		public HtmlCommentListContext trailingComment;
		public SpecialBlockContext specialBlock() {
			return GetRuleContext<SpecialBlockContext>(0);
		}
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public HtmlCommentListContext[] htmlCommentList() {
			return GetRuleContexts<HtmlCommentListContext>();
		}
		public HtmlCommentListContext htmlCommentList(int i) {
			return GetRuleContext<HtmlCommentListContext>(i);
		}
		public SpecialBlockWithCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialBlockWithComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterSpecialBlockWithComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitSpecialBlockWithComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialBlockWithComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialBlockWithCommentContext specialBlockWithComment() {
		SpecialBlockWithCommentContext _localctx = new SpecialBlockWithCommentContext(Context, State);
		EnterRule(_localctx, 4, RULE_specialBlockWithComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; _localctx.leadingComment = htmlCommentList();
			State = 157;
			if (!(isSpecialToken())) throw new FailedPredicateException(this, "isSpecialToken()");
			State = 158; specialBlock();
			State = 159; _localctx.trailingComment = htmlCommentList();
			State = 160; Match(CRLF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialBlockContext : ParserRuleContext {
		public HeadingContext heading() {
			return GetRuleContext<HeadingContext>(0);
		}
		public HorizontalRuleContext horizontalRule() {
			return GetRuleContext<HorizontalRuleContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public WikiListContext wikiList() {
			return GetRuleContext<WikiListContext>(0);
		}
		public WikiTableContext wikiTable() {
			return GetRuleContext<WikiTableContext>(0);
		}
		public SpecialBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterSpecialBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitSpecialBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialBlockContext specialBlock() {
		SpecialBlockContext _localctx = new SpecialBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_specialBlock);
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THeading:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; heading();
				}
				break;
			case THorizontalLine:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163; horizontalRule();
				}
				break;
			case TSpaceBlockStart:
				EnterOuterAlt(_localctx, 3);
				{
				State = 164; codeBlock();
				}
				break;
			case TDefinitionStart:
			case TListStart:
				EnterOuterAlt(_localctx, 4);
				{
				State = 165; wikiList();
				}
				break;
			case TTableStart:
				EnterOuterAlt(_localctx, 5);
				{
				State = 166; wikiTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingContext : ParserRuleContext {
		public HeadingLevelContext headingStart;
		public HeadingLevelContext headingEnd;
		public HeadingLevelContext[] headingLevel() {
			return GetRuleContexts<HeadingLevelContext>();
		}
		public HeadingLevelContext headingLevel(int i) {
			return GetRuleContext<HeadingLevelContext>(i);
		}
		public HeadingTextContext headingText() {
			return GetRuleContext<HeadingTextContext>(0);
		}
		public InlineTextContext inlineText() {
			return GetRuleContext<InlineTextContext>(0);
		}
		public HeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHeading(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHeading(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingContext heading() {
		HeadingContext _localctx = new HeadingContext(Context, State);
		EnterRule(_localctx, 8, RULE_heading);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; _localctx.headingStart = headingLevel();
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 170; headingText();
				State = 171; _localctx.headingEnd = headingLevel();
				}
				break;
			}
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 175; inlineText();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingLevelContext : ParserRuleContext {
		public ITerminalNode THeading() { return GetToken(MediaWikiParser.THeading, 0); }
		public HeadingLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHeadingLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHeadingLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingLevelContext headingLevel() {
		HeadingLevelContext _localctx = new HeadingLevelContext(Context, State);
		EnterRule(_localctx, 10, RULE_headingLevel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(THeading);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HorizontalRuleContext : ParserRuleContext {
		public ITerminalNode THorizontalLine() { return GetToken(MediaWikiParser.THorizontalLine, 0); }
		public InlineTextContext inlineText() {
			return GetRuleContext<InlineTextContext>(0);
		}
		public HorizontalRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_horizontalRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHorizontalRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHorizontalRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHorizontalRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HorizontalRuleContext horizontalRule() {
		HorizontalRuleContext _localctx = new HorizontalRuleContext(Context, State);
		EnterRule(_localctx, 12, RULE_horizontalRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(THorizontalLine);
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 181; inlineText();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		public SpaceBlockContext[] spaceBlock() {
			return GetRuleContexts<SpaceBlockContext>();
		}
		public SpaceBlockContext spaceBlock(int i) {
			return GetRuleContext<SpaceBlockContext>(i);
		}
		public ITerminalNode[] CRLF() { return GetTokens(MediaWikiParser.CRLF); }
		public ITerminalNode CRLF(int i) {
			return GetToken(MediaWikiParser.CRLF, i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterCodeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitCodeBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_codeBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; spaceBlock();
			State = 189;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 185; Match(CRLF);
					State = 186; spaceBlock();
					}
					} 
				}
				State = 191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpaceBlockContext : ParserRuleContext {
		public ITerminalNode TSpaceBlockStart() { return GetToken(MediaWikiParser.TSpaceBlockStart, 0); }
		public InlineTextContext inlineText() {
			return GetRuleContext<InlineTextContext>(0);
		}
		public SpaceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spaceBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterSpaceBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitSpaceBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpaceBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpaceBlockContext spaceBlock() {
		SpaceBlockContext _localctx = new SpaceBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_spaceBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(TSpaceBlockStart);
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 193; inlineText();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WikiListContext : ParserRuleContext {
		public ListItemContext[] listItem() {
			return GetRuleContexts<ListItemContext>();
		}
		public ListItemContext listItem(int i) {
			return GetRuleContext<ListItemContext>(i);
		}
		public ITerminalNode[] CRLF() { return GetTokens(MediaWikiParser.CRLF); }
		public ITerminalNode CRLF(int i) {
			return GetToken(MediaWikiParser.CRLF, i);
		}
		public WikiListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wikiList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterWikiList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitWikiList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWikiList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WikiListContext wikiList() {
		WikiListContext _localctx = new WikiListContext(Context, State);
		EnterRule(_localctx, 18, RULE_wikiList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; listItem();
			State = 201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 197; Match(CRLF);
					State = 198; listItem();
					}
					} 
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListItemContext : ParserRuleContext {
		public NormalListItemContext normalListItem() {
			return GetRuleContext<NormalListItemContext>(0);
		}
		public DefinitionItemContext definitionItem() {
			return GetRuleContext<DefinitionItemContext>(0);
		}
		public ListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListItemContext listItem() {
		ListItemContext _localctx = new ListItemContext(Context, State);
		EnterRule(_localctx, 20, RULE_listItem);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TListStart:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; normalListItem();
				}
				break;
			case TDefinitionStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205; definitionItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalListItemContext : ParserRuleContext {
		public ITerminalNode TListStart() { return GetToken(MediaWikiParser.TListStart, 0); }
		public InlineTextContext inlineText() {
			return GetRuleContext<InlineTextContext>(0);
		}
		public NormalListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalListItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterNormalListItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitNormalListItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalListItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalListItemContext normalListItem() {
		NormalListItemContext _localctx = new NormalListItemContext(Context, State);
		EnterRule(_localctx, 22, RULE_normalListItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(TListStart);
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 209; inlineText();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionItemContext : ParserRuleContext {
		public ITerminalNode TDefinitionStart() { return GetToken(MediaWikiParser.TDefinitionStart, 0); }
		public DefinitionTextContext definitionText() {
			return GetRuleContext<DefinitionTextContext>(0);
		}
		public ITerminalNode TColon() { return GetToken(MediaWikiParser.TColon, 0); }
		public InlineTextContext inlineText() {
			return GetRuleContext<InlineTextContext>(0);
		}
		public DefinitionItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitionItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterDefinitionItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitDefinitionItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionItemContext definitionItem() {
		DefinitionItemContext _localctx = new DefinitionItemContext(Context, State);
		EnterRule(_localctx, 24, RULE_definitionItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(TDefinitionStart);
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 213; definitionText();
				}
				break;
			}
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TColon) {
				{
				State = 216; Match(TColon);
				State = 217; inlineText();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WikiTableContext : ParserRuleContext {
		public InlineTextContext leadingInlineText;
		public InlineTextContext trailingInlineText;
		public ITerminalNode TTableStart() { return GetToken(MediaWikiParser.TTableStart, 0); }
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public TableRowsContext tableRows() {
			return GetRuleContext<TableRowsContext>(0);
		}
		public ITerminalNode TTableEnd() { return GetToken(MediaWikiParser.TTableEnd, 0); }
		public TableCaptionContext tableCaption() {
			return GetRuleContext<TableCaptionContext>(0);
		}
		public InlineTextContext[] inlineText() {
			return GetRuleContexts<InlineTextContext>();
		}
		public InlineTextContext inlineText(int i) {
			return GetRuleContext<InlineTextContext>(i);
		}
		public WikiTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wikiTable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterWikiTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitWikiTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWikiTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WikiTableContext wikiTable() {
		WikiTableContext _localctx = new WikiTableContext(Context, State);
		EnterRule(_localctx, 26, RULE_wikiTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(TTableStart);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THeading) | (1L << TFormat) | (1L << TLinkStart) | (1L << TExternalLinkStart) | (1L << TTemplateParamStart) | (1L << TTemplateStart) | (1L << THtmlComment) | (1L << TNoWiki) | (1L << THtmlScript) | (1L << THtmlStyle) | (1L << TEndTagStart) | (1L << TTagStart) | (1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TBar) | (1L << TExclamation) | (1L << TApos) | (1L << TSpecialChars) | (1L << TBarBar) | (1L << TExclExcl) | (1L << TColon) | (1L << TEntityRef) | (1L << TCharRef))) != 0)) {
				{
				State = 221; _localctx.leadingInlineText = inlineText();
				}
			}

			State = 224; Match(CRLF);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TTableCaptionStart) {
				{
				State = 225; tableCaption();
				}
			}

			State = 228; tableRows();
			State = 229; Match(TTableEnd);
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 230; _localctx.trailingInlineText = inlineText();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableCaptionContext : ParserRuleContext {
		public ITerminalNode TTableCaptionStart() { return GetToken(MediaWikiParser.TTableCaptionStart, 0); }
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public InlineTextContext inlineText() {
			return GetRuleContext<InlineTextContext>(0);
		}
		public SpecialBlockOrParagraphContext[] specialBlockOrParagraph() {
			return GetRuleContexts<SpecialBlockOrParagraphContext>();
		}
		public SpecialBlockOrParagraphContext specialBlockOrParagraph(int i) {
			return GetRuleContext<SpecialBlockOrParagraphContext>(i);
		}
		public TableCaptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableCaption; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTableCaption(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTableCaption(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableCaption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableCaptionContext tableCaption() {
		TableCaptionContext _localctx = new TableCaptionContext(Context, State);
		EnterRule(_localctx, 28, RULE_tableCaption);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(TTableCaptionStart);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THeading) | (1L << TFormat) | (1L << TLinkStart) | (1L << TExternalLinkStart) | (1L << TTemplateParamStart) | (1L << TTemplateStart) | (1L << THtmlComment) | (1L << TNoWiki) | (1L << THtmlScript) | (1L << THtmlStyle) | (1L << TEndTagStart) | (1L << TTagStart) | (1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TBar) | (1L << TExclamation) | (1L << TApos) | (1L << TSpecialChars) | (1L << TBarBar) | (1L << TExclExcl) | (1L << TColon) | (1L << TEntityRef) | (1L << TCharRef))) != 0)) {
				{
				State = 234; inlineText();
				}
			}

			State = 237; Match(CRLF);
			State = 241;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 238; specialBlockOrParagraph();
					}
					} 
				}
				State = 243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRowsContext : ParserRuleContext {
		public TableFirstRowContext tableFirstRow() {
			return GetRuleContext<TableFirstRowContext>(0);
		}
		public TableRowContext[] tableRow() {
			return GetRuleContexts<TableRowContext>();
		}
		public TableRowContext tableRow(int i) {
			return GetRuleContext<TableRowContext>(i);
		}
		public TableRowsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRows; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTableRows(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTableRows(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRows(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowsContext tableRows() {
		TableRowsContext _localctx = new TableRowsContext(Context, State);
		EnterRule(_localctx, 30, RULE_tableRows);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; tableFirstRow();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TTableRowStart) {
				{
				{
				State = 245; tableRow();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFirstRowContext : ParserRuleContext {
		public TableColumnContext[] tableColumn() {
			return GetRuleContexts<TableColumnContext>();
		}
		public TableColumnContext tableColumn(int i) {
			return GetRuleContext<TableColumnContext>(i);
		}
		public TableFirstRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFirstRow; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTableFirstRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTableFirstRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFirstRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFirstRowContext tableFirstRow() {
		TableFirstRowContext _localctx = new TableFirstRowContext(Context, State);
		EnterRule(_localctx, 32, RULE_tableFirstRow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar || _la==TExclamation) {
				{
				{
				State = 251; tableColumn();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRowContext : ParserRuleContext {
		public ITerminalNode TTableRowStart() { return GetToken(MediaWikiParser.TTableRowStart, 0); }
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public InlineTextContext inlineText() {
			return GetRuleContext<InlineTextContext>(0);
		}
		public TableColumnContext[] tableColumn() {
			return GetRuleContexts<TableColumnContext>();
		}
		public TableColumnContext tableColumn(int i) {
			return GetRuleContext<TableColumnContext>(i);
		}
		public TableRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRow; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTableRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTableRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowContext tableRow() {
		TableRowContext _localctx = new TableRowContext(Context, State);
		EnterRule(_localctx, 34, RULE_tableRow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(TTableRowStart);
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THeading) | (1L << TFormat) | (1L << TLinkStart) | (1L << TExternalLinkStart) | (1L << TTemplateParamStart) | (1L << TTemplateStart) | (1L << THtmlComment) | (1L << TNoWiki) | (1L << THtmlScript) | (1L << THtmlStyle) | (1L << TEndTagStart) | (1L << TTagStart) | (1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TBar) | (1L << TExclamation) | (1L << TApos) | (1L << TSpecialChars) | (1L << TBarBar) | (1L << TExclExcl) | (1L << TColon) | (1L << TEntityRef) | (1L << TCharRef))) != 0)) {
				{
				State = 258; inlineText();
				}
			}

			State = 261; Match(CRLF);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar || _la==TExclamation) {
				{
				{
				State = 262; tableColumn();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableColumnContext : ParserRuleContext {
		public TableSingleHeaderCellContext tableSingleHeaderCell() {
			return GetRuleContext<TableSingleHeaderCellContext>(0);
		}
		public TableHeaderCellsContext tableHeaderCells() {
			return GetRuleContext<TableHeaderCellsContext>(0);
		}
		public TableSingleCellContext tableSingleCell() {
			return GetRuleContext<TableSingleCellContext>(0);
		}
		public TableCellsContext tableCells() {
			return GetRuleContext<TableCellsContext>(0);
		}
		public TableColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableColumn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTableColumn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTableColumn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableColumnContext tableColumn() {
		TableColumnContext _localctx = new TableColumnContext(Context, State);
		EnterRule(_localctx, 36, RULE_tableColumn);
		try {
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; tableSingleHeaderCell();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; tableHeaderCells();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 270; tableSingleCell();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 271; tableCells();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSingleHeaderCellContext : ParserRuleContext {
		public ITerminalNode TExclamation() { return GetToken(MediaWikiParser.TExclamation, 0); }
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public TableCellContext tableCell() {
			return GetRuleContext<TableCellContext>(0);
		}
		public SpecialBlockOrParagraphContext[] specialBlockOrParagraph() {
			return GetRuleContexts<SpecialBlockOrParagraphContext>();
		}
		public SpecialBlockOrParagraphContext specialBlockOrParagraph(int i) {
			return GetRuleContext<SpecialBlockOrParagraphContext>(i);
		}
		public TableSingleHeaderCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSingleHeaderCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTableSingleHeaderCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTableSingleHeaderCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSingleHeaderCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSingleHeaderCellContext tableSingleHeaderCell() {
		TableSingleHeaderCellContext _localctx = new TableSingleHeaderCellContext(Context, State);
		EnterRule(_localctx, 38, RULE_tableSingleHeaderCell);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(TExclamation);
			State = 276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 275; tableCell();
				}
				break;
			}
			State = 278; Match(CRLF);
			State = 282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 279; specialBlockOrParagraph();
					}
					} 
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableHeaderCellsContext : ParserRuleContext {
		public ITerminalNode TExclamation() { return GetToken(MediaWikiParser.TExclamation, 0); }
		public TableCellContext[] tableCell() {
			return GetRuleContexts<TableCellContext>();
		}
		public TableCellContext tableCell(int i) {
			return GetRuleContext<TableCellContext>(i);
		}
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public ITerminalNode[] TExclExcl() { return GetTokens(MediaWikiParser.TExclExcl); }
		public ITerminalNode TExclExcl(int i) {
			return GetToken(MediaWikiParser.TExclExcl, i);
		}
		public SpecialBlockOrParagraphContext[] specialBlockOrParagraph() {
			return GetRuleContexts<SpecialBlockOrParagraphContext>();
		}
		public SpecialBlockOrParagraphContext specialBlockOrParagraph(int i) {
			return GetRuleContext<SpecialBlockOrParagraphContext>(i);
		}
		public TableHeaderCellsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableHeaderCells; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTableHeaderCells(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTableHeaderCells(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableHeaderCells(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableHeaderCellsContext tableHeaderCells() {
		TableHeaderCellsContext _localctx = new TableHeaderCellsContext(Context, State);
		EnterRule(_localctx, 40, RULE_tableHeaderCells);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(TExclamation);
			State = 286; tableCell();
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TExclExcl) {
				{
				{
				State = 287; Match(TExclExcl);
				State = 288; tableCell();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 294; Match(CRLF);
			State = 298;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 295; specialBlockOrParagraph();
					}
					} 
				}
				State = 300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSingleCellContext : ParserRuleContext {
		public ITerminalNode TBar() { return GetToken(MediaWikiParser.TBar, 0); }
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public TableCellContext tableCell() {
			return GetRuleContext<TableCellContext>(0);
		}
		public SpecialBlockOrParagraphContext[] specialBlockOrParagraph() {
			return GetRuleContexts<SpecialBlockOrParagraphContext>();
		}
		public SpecialBlockOrParagraphContext specialBlockOrParagraph(int i) {
			return GetRuleContext<SpecialBlockOrParagraphContext>(i);
		}
		public TableSingleCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSingleCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTableSingleCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTableSingleCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSingleCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSingleCellContext tableSingleCell() {
		TableSingleCellContext _localctx = new TableSingleCellContext(Context, State);
		EnterRule(_localctx, 42, RULE_tableSingleCell);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(TBar);
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 302; tableCell();
				}
				break;
			}
			State = 305; Match(CRLF);
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 306; specialBlockOrParagraph();
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableCellsContext : ParserRuleContext {
		public ITerminalNode TBar() { return GetToken(MediaWikiParser.TBar, 0); }
		public TableCellContext[] tableCell() {
			return GetRuleContexts<TableCellContext>();
		}
		public TableCellContext tableCell(int i) {
			return GetRuleContext<TableCellContext>(i);
		}
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public ITerminalNode[] TBarBar() { return GetTokens(MediaWikiParser.TBarBar); }
		public ITerminalNode TBarBar(int i) {
			return GetToken(MediaWikiParser.TBarBar, i);
		}
		public SpecialBlockOrParagraphContext[] specialBlockOrParagraph() {
			return GetRuleContexts<SpecialBlockOrParagraphContext>();
		}
		public SpecialBlockOrParagraphContext specialBlockOrParagraph(int i) {
			return GetRuleContext<SpecialBlockOrParagraphContext>(i);
		}
		public TableCellsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableCells; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTableCells(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTableCells(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableCells(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableCellsContext tableCells() {
		TableCellsContext _localctx = new TableCellsContext(Context, State);
		EnterRule(_localctx, 44, RULE_tableCells);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(TBar);
			State = 313; tableCell();
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBarBar) {
				{
				{
				State = 314; Match(TBarBar);
				State = 315; tableCell();
				}
				}
				State = 320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 321; Match(CRLF);
			State = 325;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 322; specialBlockOrParagraph();
					}
					} 
				}
				State = 327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableCellContext : ParserRuleContext {
		public CellTextContext cellText() {
			return GetRuleContext<CellTextContext>(0);
		}
		public CellValueContext cellValue() {
			return GetRuleContext<CellValueContext>(0);
		}
		public TableCellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableCell; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTableCell(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTableCell(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableCellContext tableCell() {
		TableCellContext _localctx = new TableCellContext(Context, State);
		EnterRule(_localctx, 46, RULE_tableCell);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THeading) | (1L << TFormat) | (1L << TLinkStart) | (1L << TExternalLinkStart) | (1L << TTemplateParamStart) | (1L << TTemplateStart) | (1L << THtmlComment) | (1L << TNoWiki) | (1L << THtmlScript) | (1L << THtmlStyle) | (1L << TEndTagStart) | (1L << TTagStart) | (1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TApos) | (1L << TSpecialChars) | (1L << TColon) | (1L << TEntityRef) | (1L << TCharRef))) != 0)) {
				{
				State = 328; cellText();
				}
			}

			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TBar) {
				{
				State = 331; cellValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CellValueContext : ParserRuleContext {
		public ITerminalNode TBar() { return GetToken(MediaWikiParser.TBar, 0); }
		public CellTextContext cellText() {
			return GetRuleContext<CellTextContext>(0);
		}
		public CellValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterCellValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitCellValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellValueContext cellValue() {
		CellValueContext _localctx = new CellValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_cellValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(TBar);
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THeading) | (1L << TFormat) | (1L << TLinkStart) | (1L << TExternalLinkStart) | (1L << TTemplateParamStart) | (1L << TTemplateStart) | (1L << THtmlComment) | (1L << TNoWiki) | (1L << THtmlScript) | (1L << THtmlStyle) | (1L << TEndTagStart) | (1L << TTagStart) | (1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TApos) | (1L << TSpecialChars) | (1L << TColon) | (1L << TEntityRef) | (1L << TCharRef))) != 0)) {
				{
				State = 335; cellText();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphContext : ParserRuleContext {
		public TextLineContext[] textLine() {
			return GetRuleContexts<TextLineContext>();
		}
		public TextLineContext textLine(int i) {
			return GetRuleContext<TextLineContext>(i);
		}
		public ParagraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterParagraph(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitParagraph(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphContext paragraph() {
		ParagraphContext _localctx = new ParagraphContext(Context, State);
		EnterRule(_localctx, 50, RULE_paragraph);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 338; textLine();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 341;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLineContext : ParserRuleContext {
		public TextLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLine; } }
	 
		public TextLineContext() { }
		public virtual void CopyFrom(TextLineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TextLineInlineElementsWithCommentContext : TextLineContext {
		public HtmlCommentListContext leadingComment;
		public HtmlCommentListContext trailingComment;
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public HtmlCommentListContext[] htmlCommentList() {
			return GetRuleContexts<HtmlCommentListContext>();
		}
		public HtmlCommentListContext htmlCommentList(int i) {
			return GetRuleContext<HtmlCommentListContext>(i);
		}
		public InlineTextElementContext[] inlineTextElement() {
			return GetRuleContexts<InlineTextElementContext>();
		}
		public InlineTextElementContext inlineTextElement(int i) {
			return GetRuleContext<InlineTextElementContext>(i);
		}
		public TextLineInlineElementsWithCommentContext(TextLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTextLineInlineElementsWithComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTextLineInlineElementsWithComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLineInlineElementsWithComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextLineCommentContext : TextLineContext {
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public TextLineCommentContext(TextLineContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTextLineComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTextLineComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextLineComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextLineContext textLine() {
		TextLineContext _localctx = new TextLineContext(Context, State);
		EnterRule(_localctx, 52, RULE_textLine);
		int _la;
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new TextLineInlineElementsWithCommentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 343; ((TextLineInlineElementsWithCommentContext)_localctx).leadingComment = htmlCommentList();
				State = 344;
				if (!(!isSpecialToken())) throw new FailedPredicateException(this, "!isSpecialToken()");
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 345; inlineTextElement();
					}
					}
					State = 348;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THeading) | (1L << TFormat) | (1L << TLinkStart) | (1L << TExternalLinkStart) | (1L << TTemplateParamStart) | (1L << TTemplateStart) | (1L << TNoWiki) | (1L << THtmlScript) | (1L << THtmlStyle) | (1L << TEndTagStart) | (1L << TTagStart) | (1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TBar) | (1L << TExclamation) | (1L << TApos) | (1L << TSpecialChars) | (1L << TBarBar) | (1L << TExclExcl) | (1L << TColon) | (1L << TEntityRef) | (1L << TCharRef))) != 0) );
				State = 350; ((TextLineInlineElementsWithCommentContext)_localctx).trailingComment = htmlCommentList();
				State = 351; Match(CRLF);
				}
				break;
			case 2:
				_localctx = new TextLineCommentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 353; htmlCommentList();
				State = 354; Match(CRLF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextElementsContext : ParserRuleContext {
		public WikiFormatContext wikiFormat() {
			return GetRuleContext<WikiFormatContext>(0);
		}
		public WikiLinkContext wikiLink() {
			return GetRuleContext<WikiLinkContext>(0);
		}
		public WikiTemplateContext wikiTemplate() {
			return GetRuleContext<WikiTemplateContext>(0);
		}
		public WikiTemplateParamContext wikiTemplateParam() {
			return GetRuleContext<WikiTemplateParamContext>(0);
		}
		public NoWikiContext noWiki() {
			return GetRuleContext<NoWikiContext>(0);
		}
		public HtmlReferenceContext htmlReference() {
			return GetRuleContext<HtmlReferenceContext>(0);
		}
		public HtmlStyleContext htmlStyle() {
			return GetRuleContext<HtmlStyleContext>(0);
		}
		public HtmlScriptContext htmlScript() {
			return GetRuleContext<HtmlScriptContext>(0);
		}
		public HtmlTagContext htmlTag() {
			return GetRuleContext<HtmlTagContext>(0);
		}
		public TextElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterTextElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitTextElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextElementsContext textElements() {
		TextElementsContext _localctx = new TextElementsContext(Context, State);
		EnterRule(_localctx, 54, RULE_textElements);
		try {
			State = 367;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TFormat:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358; wikiFormat();
				}
				break;
			case TLinkStart:
			case TExternalLinkStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359; wikiLink();
				}
				break;
			case TTemplateStart:
				EnterOuterAlt(_localctx, 3);
				{
				State = 360; wikiTemplate();
				}
				break;
			case TTemplateParamStart:
				EnterOuterAlt(_localctx, 4);
				{
				State = 361; wikiTemplateParam();
				}
				break;
			case TNoWiki:
				EnterOuterAlt(_localctx, 5);
				{
				State = 362; noWiki();
				}
				break;
			case TEntityRef:
			case TCharRef:
				EnterOuterAlt(_localctx, 6);
				{
				State = 363; htmlReference();
				}
				break;
			case THtmlStyle:
				EnterOuterAlt(_localctx, 7);
				{
				State = 364; htmlStyle();
				}
				break;
			case THtmlScript:
				EnterOuterAlt(_localctx, 8);
				{
				State = 365; htmlScript();
				}
				break;
			case TEndTagStart:
			case TTagStart:
				EnterOuterAlt(_localctx, 9);
				{
				State = 366; htmlTag();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineTextContext : ParserRuleContext {
		public HtmlCommentListContext trailingComment;
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public InlineTextElementWithCommentContext[] inlineTextElementWithComment() {
			return GetRuleContexts<InlineTextElementWithCommentContext>();
		}
		public InlineTextElementWithCommentContext inlineTextElementWithComment(int i) {
			return GetRuleContext<InlineTextElementWithCommentContext>(i);
		}
		public InlineTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterInlineText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitInlineText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineTextContext inlineText() {
		InlineTextContext _localctx = new InlineTextContext(Context, State);
		EnterRule(_localctx, 56, RULE_inlineText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 369; inlineTextElementWithComment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 372;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 374; _localctx.trailingComment = htmlCommentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineTextElementWithCommentContext : ParserRuleContext {
		public HtmlCommentListContext leadingComment;
		public InlineTextElementContext inlineTextElement() {
			return GetRuleContext<InlineTextElementContext>(0);
		}
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public InlineTextElementWithCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineTextElementWithComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterInlineTextElementWithComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitInlineTextElementWithComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineTextElementWithComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineTextElementWithCommentContext inlineTextElementWithComment() {
		InlineTextElementWithCommentContext _localctx = new InlineTextElementWithCommentContext(Context, State);
		EnterRule(_localctx, 58, RULE_inlineTextElementWithComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; _localctx.leadingComment = htmlCommentList();
			State = 377; inlineTextElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineTextElementContext : ParserRuleContext {
		public TextElementsContext textElements() {
			return GetRuleContext<TextElementsContext>(0);
		}
		public InlineTextElementsContext inlineTextElements() {
			return GetRuleContext<InlineTextElementsContext>(0);
		}
		public InlineTextElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineTextElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterInlineTextElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitInlineTextElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineTextElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineTextElementContext inlineTextElement() {
		InlineTextElementContext _localctx = new InlineTextElementContext(Context, State);
		EnterRule(_localctx, 60, RULE_inlineTextElement);
		try {
			State = 381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TFormat:
			case TLinkStart:
			case TExternalLinkStart:
			case TTemplateParamStart:
			case TTemplateStart:
			case TNoWiki:
			case THtmlScript:
			case THtmlStyle:
			case TEndTagStart:
			case TTagStart:
			case TEntityRef:
			case TCharRef:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379; textElements();
				}
				break;
			case THeading:
			case TNormalText:
			case TComma:
			case TWhiteSpace:
			case TBar:
			case TExclamation:
			case TApos:
			case TSpecialChars:
			case TBarBar:
			case TExclExcl:
			case TColon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; inlineTextElements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineTextElementsContext : ParserRuleContext {
		public ITerminalNode TNormalText() { return GetToken(MediaWikiParser.TNormalText, 0); }
		public ITerminalNode TWhiteSpace() { return GetToken(MediaWikiParser.TWhiteSpace, 0); }
		public ITerminalNode TComma() { return GetToken(MediaWikiParser.TComma, 0); }
		public ITerminalNode TBar() { return GetToken(MediaWikiParser.TBar, 0); }
		public ITerminalNode TBarBar() { return GetToken(MediaWikiParser.TBarBar, 0); }
		public ITerminalNode TExclamation() { return GetToken(MediaWikiParser.TExclamation, 0); }
		public ITerminalNode TExclExcl() { return GetToken(MediaWikiParser.TExclExcl, 0); }
		public ITerminalNode TApos() { return GetToken(MediaWikiParser.TApos, 0); }
		public ITerminalNode TColon() { return GetToken(MediaWikiParser.TColon, 0); }
		public ITerminalNode TSpecialChars() { return GetToken(MediaWikiParser.TSpecialChars, 0); }
		public ITerminalNode THeading() { return GetToken(MediaWikiParser.THeading, 0); }
		public InlineTextElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineTextElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterInlineTextElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitInlineTextElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineTextElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineTextElementsContext inlineTextElements() {
		InlineTextElementsContext _localctx = new InlineTextElementsContext(Context, State);
		EnterRule(_localctx, 62, RULE_inlineTextElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THeading) | (1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TBar) | (1L << TExclamation) | (1L << TApos) | (1L << TSpecialChars) | (1L << TBarBar) | (1L << TExclExcl) | (1L << TColon))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionTextContext : ParserRuleContext {
		public HtmlCommentListContext trailingComment;
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public DefinitionTextElementWithCommentContext[] definitionTextElementWithComment() {
			return GetRuleContexts<DefinitionTextElementWithCommentContext>();
		}
		public DefinitionTextElementWithCommentContext definitionTextElementWithComment(int i) {
			return GetRuleContext<DefinitionTextElementWithCommentContext>(i);
		}
		public DefinitionTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitionText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterDefinitionText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitDefinitionText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionTextContext definitionText() {
		DefinitionTextContext _localctx = new DefinitionTextContext(Context, State);
		EnterRule(_localctx, 64, RULE_definitionText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 385; definitionTextElementWithComment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 390; _localctx.trailingComment = htmlCommentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionTextElementWithCommentContext : ParserRuleContext {
		public HtmlCommentListContext leadingComment;
		public DefinitionTextElementContext definitionTextElement() {
			return GetRuleContext<DefinitionTextElementContext>(0);
		}
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public DefinitionTextElementWithCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitionTextElementWithComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterDefinitionTextElementWithComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitDefinitionTextElementWithComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionTextElementWithComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionTextElementWithCommentContext definitionTextElementWithComment() {
		DefinitionTextElementWithCommentContext _localctx = new DefinitionTextElementWithCommentContext(Context, State);
		EnterRule(_localctx, 66, RULE_definitionTextElementWithComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; _localctx.leadingComment = htmlCommentList();
			State = 393; definitionTextElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionTextElementContext : ParserRuleContext {
		public TextElementsContext textElements() {
			return GetRuleContext<TextElementsContext>(0);
		}
		public DefinitionTextElementsContext definitionTextElements() {
			return GetRuleContext<DefinitionTextElementsContext>(0);
		}
		public DefinitionTextElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitionTextElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterDefinitionTextElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitDefinitionTextElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionTextElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionTextElementContext definitionTextElement() {
		DefinitionTextElementContext _localctx = new DefinitionTextElementContext(Context, State);
		EnterRule(_localctx, 68, RULE_definitionTextElement);
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TFormat:
			case TLinkStart:
			case TExternalLinkStart:
			case TTemplateParamStart:
			case TTemplateStart:
			case TNoWiki:
			case THtmlScript:
			case THtmlStyle:
			case TEndTagStart:
			case TTagStart:
			case TEntityRef:
			case TCharRef:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395; textElements();
				}
				break;
			case THeading:
			case TNormalText:
			case TComma:
			case TWhiteSpace:
			case TBar:
			case TExclamation:
			case TApos:
			case TSpecialChars:
			case TBarBar:
			case TExclExcl:
				EnterOuterAlt(_localctx, 2);
				{
				State = 396; definitionTextElements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionTextElementsContext : ParserRuleContext {
		public ITerminalNode TNormalText() { return GetToken(MediaWikiParser.TNormalText, 0); }
		public ITerminalNode TWhiteSpace() { return GetToken(MediaWikiParser.TWhiteSpace, 0); }
		public ITerminalNode TComma() { return GetToken(MediaWikiParser.TComma, 0); }
		public ITerminalNode TBar() { return GetToken(MediaWikiParser.TBar, 0); }
		public ITerminalNode TBarBar() { return GetToken(MediaWikiParser.TBarBar, 0); }
		public ITerminalNode TExclamation() { return GetToken(MediaWikiParser.TExclamation, 0); }
		public ITerminalNode TExclExcl() { return GetToken(MediaWikiParser.TExclExcl, 0); }
		public ITerminalNode TApos() { return GetToken(MediaWikiParser.TApos, 0); }
		public ITerminalNode TSpecialChars() { return GetToken(MediaWikiParser.TSpecialChars, 0); }
		public ITerminalNode THeading() { return GetToken(MediaWikiParser.THeading, 0); }
		public DefinitionTextElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitionTextElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterDefinitionTextElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitDefinitionTextElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitionTextElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionTextElementsContext definitionTextElements() {
		DefinitionTextElementsContext _localctx = new DefinitionTextElementsContext(Context, State);
		EnterRule(_localctx, 70, RULE_definitionTextElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THeading) | (1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TBar) | (1L << TExclamation) | (1L << TApos) | (1L << TSpecialChars) | (1L << TBarBar) | (1L << TExclExcl))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingTextContext : ParserRuleContext {
		public HtmlCommentListContext trailingComment;
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public HeadingTextWithCommentContext[] headingTextWithComment() {
			return GetRuleContexts<HeadingTextWithCommentContext>();
		}
		public HeadingTextWithCommentContext headingTextWithComment(int i) {
			return GetRuleContext<HeadingTextWithCommentContext>(i);
		}
		public HeadingTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHeadingText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHeadingText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingTextContext headingText() {
		HeadingTextContext _localctx = new HeadingTextContext(Context, State);
		EnterRule(_localctx, 72, RULE_headingText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 401; headingTextWithComment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 404;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 406; _localctx.trailingComment = htmlCommentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingTextWithCommentContext : ParserRuleContext {
		public HtmlCommentListContext leadingComment;
		public HeadingTextElementContext headingTextElement() {
			return GetRuleContext<HeadingTextElementContext>(0);
		}
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public HeadingTextWithCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingTextWithComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHeadingTextWithComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHeadingTextWithComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingTextWithComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingTextWithCommentContext headingTextWithComment() {
		HeadingTextWithCommentContext _localctx = new HeadingTextWithCommentContext(Context, State);
		EnterRule(_localctx, 74, RULE_headingTextWithComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; _localctx.leadingComment = htmlCommentList();
			State = 409; headingTextElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingTextElementContext : ParserRuleContext {
		public TextElementsContext textElements() {
			return GetRuleContext<TextElementsContext>(0);
		}
		public HeadingTextElementsContext headingTextElements() {
			return GetRuleContext<HeadingTextElementsContext>(0);
		}
		public HeadingTextElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingTextElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHeadingTextElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHeadingTextElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingTextElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingTextElementContext headingTextElement() {
		HeadingTextElementContext _localctx = new HeadingTextElementContext(Context, State);
		EnterRule(_localctx, 76, RULE_headingTextElement);
		try {
			State = 413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TFormat:
			case TLinkStart:
			case TExternalLinkStart:
			case TTemplateParamStart:
			case TTemplateStart:
			case TNoWiki:
			case THtmlScript:
			case THtmlStyle:
			case TEndTagStart:
			case TTagStart:
			case TEntityRef:
			case TCharRef:
				EnterOuterAlt(_localctx, 1);
				{
				State = 411; textElements();
				}
				break;
			case TNormalText:
			case TComma:
			case TWhiteSpace:
			case TBar:
			case TExclamation:
			case TApos:
			case TSpecialChars:
			case TBarBar:
			case TExclExcl:
			case TColon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412; headingTextElements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadingTextElementsContext : ParserRuleContext {
		public ITerminalNode TNormalText() { return GetToken(MediaWikiParser.TNormalText, 0); }
		public ITerminalNode TWhiteSpace() { return GetToken(MediaWikiParser.TWhiteSpace, 0); }
		public ITerminalNode TComma() { return GetToken(MediaWikiParser.TComma, 0); }
		public ITerminalNode TBar() { return GetToken(MediaWikiParser.TBar, 0); }
		public ITerminalNode TBarBar() { return GetToken(MediaWikiParser.TBarBar, 0); }
		public ITerminalNode TExclamation() { return GetToken(MediaWikiParser.TExclamation, 0); }
		public ITerminalNode TExclExcl() { return GetToken(MediaWikiParser.TExclExcl, 0); }
		public ITerminalNode TApos() { return GetToken(MediaWikiParser.TApos, 0); }
		public ITerminalNode TColon() { return GetToken(MediaWikiParser.TColon, 0); }
		public ITerminalNode TSpecialChars() { return GetToken(MediaWikiParser.TSpecialChars, 0); }
		public HeadingTextElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headingTextElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHeadingTextElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHeadingTextElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeadingTextElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadingTextElementsContext headingTextElements() {
		HeadingTextElementsContext _localctx = new HeadingTextElementsContext(Context, State);
		EnterRule(_localctx, 78, RULE_headingTextElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TBar) | (1L << TExclamation) | (1L << TApos) | (1L << TSpecialChars) | (1L << TBarBar) | (1L << TExclExcl) | (1L << TColon))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CellTextContext : ParserRuleContext {
		public HtmlCommentListContext trailingComment;
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public CellTextElementWithCommentContext[] cellTextElementWithComment() {
			return GetRuleContexts<CellTextElementWithCommentContext>();
		}
		public CellTextElementWithCommentContext cellTextElementWithComment(int i) {
			return GetRuleContext<CellTextElementWithCommentContext>(i);
		}
		public CellTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterCellText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitCellText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellTextContext cellText() {
		CellTextContext _localctx = new CellTextContext(Context, State);
		EnterRule(_localctx, 80, RULE_cellText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 417; cellTextElementWithComment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 422; _localctx.trailingComment = htmlCommentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CellTextElementWithCommentContext : ParserRuleContext {
		public HtmlCommentListContext leadingComment;
		public CellTextElementContext cellTextElement() {
			return GetRuleContext<CellTextElementContext>(0);
		}
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public CellTextElementWithCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellTextElementWithComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterCellTextElementWithComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitCellTextElementWithComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellTextElementWithComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellTextElementWithCommentContext cellTextElementWithComment() {
		CellTextElementWithCommentContext _localctx = new CellTextElementWithCommentContext(Context, State);
		EnterRule(_localctx, 82, RULE_cellTextElementWithComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; _localctx.leadingComment = htmlCommentList();
			State = 425; cellTextElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CellTextElementContext : ParserRuleContext {
		public TextElementsContext textElements() {
			return GetRuleContext<TextElementsContext>(0);
		}
		public CellTextElementsContext cellTextElements() {
			return GetRuleContext<CellTextElementsContext>(0);
		}
		public CellTextElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellTextElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterCellTextElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitCellTextElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellTextElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellTextElementContext cellTextElement() {
		CellTextElementContext _localctx = new CellTextElementContext(Context, State);
		EnterRule(_localctx, 84, RULE_cellTextElement);
		try {
			State = 429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TFormat:
			case TLinkStart:
			case TExternalLinkStart:
			case TTemplateParamStart:
			case TTemplateStart:
			case TNoWiki:
			case THtmlScript:
			case THtmlStyle:
			case TEndTagStart:
			case TTagStart:
			case TEntityRef:
			case TCharRef:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427; textElements();
				}
				break;
			case THeading:
			case TNormalText:
			case TComma:
			case TWhiteSpace:
			case TApos:
			case TSpecialChars:
			case TColon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 428; cellTextElements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CellTextElementsContext : ParserRuleContext {
		public ITerminalNode TNormalText() { return GetToken(MediaWikiParser.TNormalText, 0); }
		public ITerminalNode TWhiteSpace() { return GetToken(MediaWikiParser.TWhiteSpace, 0); }
		public ITerminalNode TComma() { return GetToken(MediaWikiParser.TComma, 0); }
		public ITerminalNode TApos() { return GetToken(MediaWikiParser.TApos, 0); }
		public ITerminalNode TColon() { return GetToken(MediaWikiParser.TColon, 0); }
		public ITerminalNode TSpecialChars() { return GetToken(MediaWikiParser.TSpecialChars, 0); }
		public ITerminalNode THeading() { return GetToken(MediaWikiParser.THeading, 0); }
		public CellTextElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cellTextElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterCellTextElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitCellTextElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellTextElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellTextElementsContext cellTextElements() {
		CellTextElementsContext _localctx = new CellTextElementsContext(Context, State);
		EnterRule(_localctx, 86, RULE_cellTextElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THeading) | (1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TApos) | (1L << TSpecialChars) | (1L << TColon))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkTextContext : ParserRuleContext {
		public HtmlCommentListContext trailingComment;
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public LinkTextWithCommentContext[] linkTextWithComment() {
			return GetRuleContexts<LinkTextWithCommentContext>();
		}
		public LinkTextWithCommentContext linkTextWithComment(int i) {
			return GetRuleContext<LinkTextWithCommentContext>(i);
		}
		public LinkTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkText; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterLinkText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitLinkText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkTextContext linkText() {
		LinkTextContext _localctx = new LinkTextContext(Context, State);
		EnterRule(_localctx, 88, RULE_linkText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 433; linkTextWithComment();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 436;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 438; _localctx.trailingComment = htmlCommentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkTextWithCommentContext : ParserRuleContext {
		public HtmlCommentListContext leadingComment;
		public LinkTextElementContext linkTextElement() {
			return GetRuleContext<LinkTextElementContext>(0);
		}
		public HtmlCommentListContext htmlCommentList() {
			return GetRuleContext<HtmlCommentListContext>(0);
		}
		public LinkTextWithCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkTextWithComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterLinkTextWithComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitLinkTextWithComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkTextWithComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkTextWithCommentContext linkTextWithComment() {
		LinkTextWithCommentContext _localctx = new LinkTextWithCommentContext(Context, State);
		EnterRule(_localctx, 90, RULE_linkTextWithComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; _localctx.leadingComment = htmlCommentList();
			State = 441; linkTextElement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkTextElementContext : ParserRuleContext {
		public TextElementsContext textElements() {
			return GetRuleContext<TextElementsContext>(0);
		}
		public LinkTextElementsContext linkTextElements() {
			return GetRuleContext<LinkTextElementsContext>(0);
		}
		public LinkTextElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkTextElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterLinkTextElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitLinkTextElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkTextElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkTextElementContext linkTextElement() {
		LinkTextElementContext _localctx = new LinkTextElementContext(Context, State);
		EnterRule(_localctx, 92, RULE_linkTextElement);
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TFormat:
			case TLinkStart:
			case TExternalLinkStart:
			case TTemplateParamStart:
			case TTemplateStart:
			case TNoWiki:
			case THtmlScript:
			case THtmlStyle:
			case TEndTagStart:
			case TTagStart:
			case TEntityRef:
			case TCharRef:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443; textElements();
				}
				break;
			case THeading:
			case TNormalText:
			case TComma:
			case TWhiteSpace:
			case TExclamation:
			case TApos:
			case TSpecialChars:
			case TExclExcl:
			case TColon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 444; linkTextElements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkTextElementsContext : ParserRuleContext {
		public ITerminalNode TNormalText() { return GetToken(MediaWikiParser.TNormalText, 0); }
		public ITerminalNode TWhiteSpace() { return GetToken(MediaWikiParser.TWhiteSpace, 0); }
		public ITerminalNode TComma() { return GetToken(MediaWikiParser.TComma, 0); }
		public ITerminalNode TExclamation() { return GetToken(MediaWikiParser.TExclamation, 0); }
		public ITerminalNode TExclExcl() { return GetToken(MediaWikiParser.TExclExcl, 0); }
		public ITerminalNode TApos() { return GetToken(MediaWikiParser.TApos, 0); }
		public ITerminalNode TColon() { return GetToken(MediaWikiParser.TColon, 0); }
		public ITerminalNode TSpecialChars() { return GetToken(MediaWikiParser.TSpecialChars, 0); }
		public ITerminalNode THeading() { return GetToken(MediaWikiParser.THeading, 0); }
		public LinkTextElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkTextElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterLinkTextElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitLinkTextElements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkTextElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkTextElementsContext linkTextElements() {
		LinkTextElementsContext _localctx = new LinkTextElementsContext(Context, State);
		EnterRule(_localctx, 94, RULE_linkTextElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THeading) | (1L << TNormalText) | (1L << TComma) | (1L << TWhiteSpace) | (1L << TExclamation) | (1L << TApos) | (1L << TSpecialChars) | (1L << TExclExcl) | (1L << TColon))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WikiFormatContext : ParserRuleContext {
		public ITerminalNode TFormat() { return GetToken(MediaWikiParser.TFormat, 0); }
		public WikiFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wikiFormat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterWikiFormat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitWikiFormat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWikiFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WikiFormatContext wikiFormat() {
		WikiFormatContext _localctx = new WikiFormatContext(Context, State);
		EnterRule(_localctx, 96, RULE_wikiFormat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; Match(TFormat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WikiLinkContext : ParserRuleContext {
		public WikiInternalLinkContext wikiInternalLink() {
			return GetRuleContext<WikiInternalLinkContext>(0);
		}
		public WikiExternalLinkContext wikiExternalLink() {
			return GetRuleContext<WikiExternalLinkContext>(0);
		}
		public WikiLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wikiLink; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterWikiLink(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitWikiLink(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWikiLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WikiLinkContext wikiLink() {
		WikiLinkContext _localctx = new WikiLinkContext(Context, State);
		EnterRule(_localctx, 98, RULE_wikiLink);
		try {
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TLinkStart:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451; wikiInternalLink();
				}
				break;
			case TExternalLinkStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 452; wikiExternalLink();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WikiInternalLinkContext : ParserRuleContext {
		public ITerminalNode TLinkStart() { return GetToken(MediaWikiParser.TLinkStart, 0); }
		public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		public ITerminalNode TLinkEnd() { return GetToken(MediaWikiParser.TLinkEnd, 0); }
		public LinkTextPartContext[] linkTextPart() {
			return GetRuleContexts<LinkTextPartContext>();
		}
		public LinkTextPartContext linkTextPart(int i) {
			return GetRuleContext<LinkTextPartContext>(i);
		}
		public WikiInternalLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wikiInternalLink; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterWikiInternalLink(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitWikiInternalLink(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWikiInternalLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WikiInternalLinkContext wikiInternalLink() {
		WikiInternalLinkContext _localctx = new WikiInternalLinkContext(Context, State);
		EnterRule(_localctx, 100, RULE_wikiInternalLink);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; Match(TLinkStart);
			State = 456; linkText();
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar || _la==TBarBar) {
				{
				{
				State = 457; linkTextPart();
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 463; Match(TLinkEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WikiExternalLinkContext : ParserRuleContext {
		public ITerminalNode TExternalLinkStart() { return GetToken(MediaWikiParser.TExternalLinkStart, 0); }
		public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		public ITerminalNode TExternalLinkEnd() { return GetToken(MediaWikiParser.TExternalLinkEnd, 0); }
		public LinkTextPartContext[] linkTextPart() {
			return GetRuleContexts<LinkTextPartContext>();
		}
		public LinkTextPartContext linkTextPart(int i) {
			return GetRuleContext<LinkTextPartContext>(i);
		}
		public WikiExternalLinkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wikiExternalLink; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterWikiExternalLink(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitWikiExternalLink(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWikiExternalLink(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WikiExternalLinkContext wikiExternalLink() {
		WikiExternalLinkContext _localctx = new WikiExternalLinkContext(Context, State);
		EnterRule(_localctx, 102, RULE_wikiExternalLink);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; Match(TExternalLinkStart);
			State = 466; linkText();
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar || _la==TBarBar) {
				{
				{
				State = 467; linkTextPart();
				}
				}
				State = 472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 473; Match(TExternalLinkEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WikiTemplateContext : ParserRuleContext {
		public ITerminalNode TTemplateStart() { return GetToken(MediaWikiParser.TTemplateStart, 0); }
		public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		public ITerminalNode TTemplateEnd() { return GetToken(MediaWikiParser.TTemplateEnd, 0); }
		public LinkTextPartContext[] linkTextPart() {
			return GetRuleContexts<LinkTextPartContext>();
		}
		public LinkTextPartContext linkTextPart(int i) {
			return GetRuleContext<LinkTextPartContext>(i);
		}
		public WikiTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wikiTemplate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterWikiTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitWikiTemplate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWikiTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WikiTemplateContext wikiTemplate() {
		WikiTemplateContext _localctx = new WikiTemplateContext(Context, State);
		EnterRule(_localctx, 104, RULE_wikiTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475; Match(TTemplateStart);
			State = 476; linkText();
			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar || _la==TBarBar) {
				{
				{
				State = 477; linkTextPart();
				}
				}
				State = 482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 483; Match(TTemplateEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WikiTemplateParamContext : ParserRuleContext {
		public ITerminalNode TTemplateParamStart() { return GetToken(MediaWikiParser.TTemplateParamStart, 0); }
		public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		public ITerminalNode TTemplateParamEnd() { return GetToken(MediaWikiParser.TTemplateParamEnd, 0); }
		public LinkTextPartContext[] linkTextPart() {
			return GetRuleContexts<LinkTextPartContext>();
		}
		public LinkTextPartContext linkTextPart(int i) {
			return GetRuleContext<LinkTextPartContext>(i);
		}
		public WikiTemplateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wikiTemplateParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterWikiTemplateParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitWikiTemplateParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWikiTemplateParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WikiTemplateParamContext wikiTemplateParam() {
		WikiTemplateParamContext _localctx = new WikiTemplateParamContext(Context, State);
		EnterRule(_localctx, 106, RULE_wikiTemplateParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485; Match(TTemplateParamStart);
			State = 486; linkText();
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TBar || _la==TBarBar) {
				{
				{
				State = 487; linkTextPart();
				}
				}
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 493; Match(TTemplateParamEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoWikiContext : ParserRuleContext {
		public ITerminalNode TNoWiki() { return GetToken(MediaWikiParser.TNoWiki, 0); }
		public NoWikiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noWiki; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterNoWiki(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitNoWiki(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoWiki(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoWikiContext noWiki() {
		NoWikiContext _localctx = new NoWikiContext(Context, State);
		EnterRule(_localctx, 108, RULE_noWiki);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(TNoWiki);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BarOrBarBarContext : ParserRuleContext {
		public ITerminalNode TBar() { return GetToken(MediaWikiParser.TBar, 0); }
		public ITerminalNode TBarBar() { return GetToken(MediaWikiParser.TBarBar, 0); }
		public BarOrBarBarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_barOrBarBar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterBarOrBarBar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitBarOrBarBar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBarOrBarBar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BarOrBarBarContext barOrBarBar() {
		BarOrBarBarContext _localctx = new BarOrBarBarContext(Context, State);
		EnterRule(_localctx, 110, RULE_barOrBarBar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			_la = TokenStream.LA(1);
			if ( !(_la==TBar || _la==TBarBar) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkTextPartContext : ParserRuleContext {
		public BarOrBarBarContext barOrBarBar() {
			return GetRuleContext<BarOrBarBarContext>(0);
		}
		public LinkTextContext linkText() {
			return GetRuleContext<LinkTextContext>(0);
		}
		public LinkTextPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkTextPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterLinkTextPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitLinkTextPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinkTextPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinkTextPartContext linkTextPart() {
		LinkTextPartContext _localctx = new LinkTextPartContext(Context, State);
		EnterRule(_localctx, 112, RULE_linkTextPart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; barOrBarBar();
			State = 500; linkText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlReferenceContext : ParserRuleContext {
		public ITerminalNode TEntityRef() { return GetToken(MediaWikiParser.TEntityRef, 0); }
		public ITerminalNode TCharRef() { return GetToken(MediaWikiParser.TCharRef, 0); }
		public HtmlReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlReference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlReference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlReferenceContext htmlReference() {
		HtmlReferenceContext _localctx = new HtmlReferenceContext(Context, State);
		EnterRule(_localctx, 114, RULE_htmlReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			_la = TokenStream.LA(1);
			if ( !(_la==TEntityRef || _la==TCharRef) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlCommentListContext : ParserRuleContext {
		public HtmlCommentContext[] htmlComment() {
			return GetRuleContexts<HtmlCommentContext>();
		}
		public HtmlCommentContext htmlComment(int i) {
			return GetRuleContext<HtmlCommentContext>(i);
		}
		public HtmlCommentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlCommentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlCommentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlCommentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlCommentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlCommentListContext htmlCommentList() {
		HtmlCommentListContext _localctx = new HtmlCommentListContext(Context, State);
		EnterRule(_localctx, 116, RULE_htmlCommentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 504; htmlComment();
					}
					} 
				}
				State = 509;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlCommentContext : ParserRuleContext {
		public ITerminalNode THtmlComment() { return GetToken(MediaWikiParser.THtmlComment, 0); }
		public HtmlCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlComment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlCommentContext htmlComment() {
		HtmlCommentContext _localctx = new HtmlCommentContext(Context, State);
		EnterRule(_localctx, 118, RULE_htmlComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510; Match(THtmlComment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlStyleContext : ParserRuleContext {
		public ITerminalNode THtmlStyle() { return GetToken(MediaWikiParser.THtmlStyle, 0); }
		public HtmlStyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlStyle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlStyle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlStyle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlStyle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlStyleContext htmlStyle() {
		HtmlStyleContext _localctx = new HtmlStyleContext(Context, State);
		EnterRule(_localctx, 120, RULE_htmlStyle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512; Match(THtmlStyle);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlScriptContext : ParserRuleContext {
		public ITerminalNode THtmlScript() { return GetToken(MediaWikiParser.THtmlScript, 0); }
		public HtmlScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlScript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlScript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlScriptContext htmlScript() {
		HtmlScriptContext _localctx = new HtmlScriptContext(Context, State);
		EnterRule(_localctx, 122, RULE_htmlScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514; Match(THtmlScript);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagContext : ParserRuleContext {
		public HtmlTagOpenContext htmlTagOpen() {
			return GetRuleContext<HtmlTagOpenContext>(0);
		}
		public HtmlTagCloseContext htmlTagClose() {
			return GetRuleContext<HtmlTagCloseContext>(0);
		}
		public HtmlTagEmptyContext htmlTagEmpty() {
			return GetRuleContext<HtmlTagEmptyContext>(0);
		}
		public HtmlTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagContext htmlTag() {
		HtmlTagContext _localctx = new HtmlTagContext(Context, State);
		EnterRule(_localctx, 124, RULE_htmlTag);
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516; htmlTagOpen();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 517; htmlTagClose();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 518; htmlTagEmpty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagOpenContext : ParserRuleContext {
		public WhitespaceListContext leadingWhitespace;
		public WhitespaceListContext trailingWhitespace;
		public ITerminalNode TTagStart() { return GetToken(MediaWikiParser.TTagStart, 0); }
		public HtmlTagNameContext htmlTagName() {
			return GetRuleContext<HtmlTagNameContext>(0);
		}
		public ITerminalNode TTagEnd() { return GetToken(MediaWikiParser.TTagEnd, 0); }
		public WhitespaceListContext[] whitespaceList() {
			return GetRuleContexts<WhitespaceListContext>();
		}
		public WhitespaceListContext whitespaceList(int i) {
			return GetRuleContext<WhitespaceListContext>(i);
		}
		public HtmlAttributeContext[] htmlAttribute() {
			return GetRuleContexts<HtmlAttributeContext>();
		}
		public HtmlAttributeContext htmlAttribute(int i) {
			return GetRuleContext<HtmlAttributeContext>(i);
		}
		public HtmlTagOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTagOpen; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlTagOpen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlTagOpen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlTagOpen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagOpenContext htmlTagOpen() {
		HtmlTagOpenContext _localctx = new HtmlTagOpenContext(Context, State);
		EnterRule(_localctx, 126, RULE_htmlTagOpen);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 521; Match(TTagStart);
			State = 522; _localctx.leadingWhitespace = whitespaceList();
			State = 523; htmlTagName();
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 524; htmlAttribute();
					}
					} 
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 530; _localctx.trailingWhitespace = whitespaceList();
			State = 531; Match(TTagEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagCloseContext : ParserRuleContext {
		public WhitespaceListContext leadingWhitespace;
		public WhitespaceListContext trailingWhitespace;
		public ITerminalNode TEndTagStart() { return GetToken(MediaWikiParser.TEndTagStart, 0); }
		public HtmlTagNameContext htmlTagName() {
			return GetRuleContext<HtmlTagNameContext>(0);
		}
		public ITerminalNode TEndTagEnd() { return GetToken(MediaWikiParser.TEndTagEnd, 0); }
		public WhitespaceListContext[] whitespaceList() {
			return GetRuleContexts<WhitespaceListContext>();
		}
		public WhitespaceListContext whitespaceList(int i) {
			return GetRuleContext<WhitespaceListContext>(i);
		}
		public HtmlAttributeContext[] htmlAttribute() {
			return GetRuleContexts<HtmlAttributeContext>();
		}
		public HtmlAttributeContext htmlAttribute(int i) {
			return GetRuleContext<HtmlAttributeContext>(i);
		}
		public HtmlTagCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTagClose; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlTagClose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlTagClose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlTagClose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagCloseContext htmlTagClose() {
		HtmlTagCloseContext _localctx = new HtmlTagCloseContext(Context, State);
		EnterRule(_localctx, 128, RULE_htmlTagClose);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; Match(TEndTagStart);
			State = 534; _localctx.leadingWhitespace = whitespaceList();
			State = 535; htmlTagName();
			State = 539;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 536; htmlAttribute();
					}
					} 
				}
				State = 541;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			State = 542; _localctx.trailingWhitespace = whitespaceList();
			State = 543; Match(TEndTagEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagEmptyContext : ParserRuleContext {
		public WhitespaceListContext leadingWhitespace;
		public WhitespaceListContext trailingWhitespace;
		public ITerminalNode TTagStart() { return GetToken(MediaWikiParser.TTagStart, 0); }
		public HtmlTagNameContext htmlTagName() {
			return GetRuleContext<HtmlTagNameContext>(0);
		}
		public ITerminalNode TTagCloseEnd() { return GetToken(MediaWikiParser.TTagCloseEnd, 0); }
		public WhitespaceListContext[] whitespaceList() {
			return GetRuleContexts<WhitespaceListContext>();
		}
		public WhitespaceListContext whitespaceList(int i) {
			return GetRuleContext<WhitespaceListContext>(i);
		}
		public HtmlAttributeContext[] htmlAttribute() {
			return GetRuleContexts<HtmlAttributeContext>();
		}
		public HtmlAttributeContext htmlAttribute(int i) {
			return GetRuleContext<HtmlAttributeContext>(i);
		}
		public HtmlTagEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTagEmpty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlTagEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlTagEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlTagEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagEmptyContext htmlTagEmpty() {
		HtmlTagEmptyContext _localctx = new HtmlTagEmptyContext(Context, State);
		EnterRule(_localctx, 130, RULE_htmlTagEmpty);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; Match(TTagStart);
			State = 546; _localctx.leadingWhitespace = whitespaceList();
			State = 547; htmlTagName();
			State = 551;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 548; htmlAttribute();
					}
					} 
				}
				State = 553;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			State = 554; _localctx.trailingWhitespace = whitespaceList();
			State = 555; Match(TTagCloseEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeContext : ParserRuleContext {
		public HtmlAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttribute; } }
	 
		public HtmlAttributeContext() { }
		public virtual void CopyFrom(HtmlAttributeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HtmlAttributeWithValueContext : HtmlAttributeContext {
		public WhitespaceListContext leadingWhitespace;
		public WhitespaceListContext whitespaceBeforeEquals;
		public WhitespaceListContext whitespaceAfterEquals;
		public HtmlAttributeNameContext htmlAttributeName() {
			return GetRuleContext<HtmlAttributeNameContext>(0);
		}
		public ITerminalNode TAttributeEquals() { return GetToken(MediaWikiParser.TAttributeEquals, 0); }
		public HtmlAttributeValueContext htmlAttributeValue() {
			return GetRuleContext<HtmlAttributeValueContext>(0);
		}
		public WhitespaceListContext[] whitespaceList() {
			return GetRuleContexts<WhitespaceListContext>();
		}
		public WhitespaceListContext whitespaceList(int i) {
			return GetRuleContext<WhitespaceListContext>(i);
		}
		public HtmlAttributeWithValueContext(HtmlAttributeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeWithValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeWithValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlAttributeWithValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HtmlAttributeWithNoValueContext : HtmlAttributeContext {
		public WhitespaceListContext leadingWhitespace;
		public HtmlAttributeNameContext htmlAttributeName() {
			return GetRuleContext<HtmlAttributeNameContext>(0);
		}
		public WhitespaceListContext whitespaceList() {
			return GetRuleContext<WhitespaceListContext>(0);
		}
		public HtmlAttributeWithNoValueContext(HtmlAttributeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeWithNoValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeWithNoValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlAttributeWithNoValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeContext htmlAttribute() {
		HtmlAttributeContext _localctx = new HtmlAttributeContext(Context, State);
		EnterRule(_localctx, 132, RULE_htmlAttribute);
		try {
			State = 567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				_localctx = new HtmlAttributeWithValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 557; ((HtmlAttributeWithValueContext)_localctx).leadingWhitespace = whitespaceList();
				State = 558; htmlAttributeName();
				State = 559; ((HtmlAttributeWithValueContext)_localctx).whitespaceBeforeEquals = whitespaceList();
				State = 560; Match(TAttributeEquals);
				State = 561; ((HtmlAttributeWithValueContext)_localctx).whitespaceAfterEquals = whitespaceList();
				State = 562; htmlAttributeValue();
				}
				break;
			case 2:
				_localctx = new HtmlAttributeWithNoValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 564; ((HtmlAttributeWithNoValueContext)_localctx).leadingWhitespace = whitespaceList();
				State = 565; htmlAttributeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeNameContext : ParserRuleContext {
		public ITerminalNode TTagName() { return GetToken(MediaWikiParser.TTagName, 0); }
		public HtmlAttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeNameContext htmlAttributeName() {
		HtmlAttributeNameContext _localctx = new HtmlAttributeNameContext(Context, State);
		EnterRule(_localctx, 134, RULE_htmlAttributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; Match(TTagName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeValueContext : ParserRuleContext {
		public ITerminalNode TAttributeValue() { return GetToken(MediaWikiParser.TAttributeValue, 0); }
		public HtmlAttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeValueContext htmlAttributeValue() {
		HtmlAttributeValueContext _localctx = new HtmlAttributeValueContext(Context, State);
		EnterRule(_localctx, 136, RULE_htmlAttributeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(TAttributeValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagNameContext : ParserRuleContext {
		public ITerminalNode TTagName() { return GetToken(MediaWikiParser.TTagName, 0); }
		public HtmlTagNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTagName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterHtmlTagName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitHtmlTagName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlTagName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagNameContext htmlTagName() {
		HtmlTagNameContext _localctx = new HtmlTagNameContext(Context, State);
		EnterRule(_localctx, 138, RULE_htmlTagName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; Match(TTagName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhitespaceListContext : ParserRuleContext {
		public WhitespaceContext[] whitespace() {
			return GetRuleContexts<WhitespaceContext>();
		}
		public WhitespaceContext whitespace(int i) {
			return GetRuleContext<WhitespaceContext>(i);
		}
		public WhitespaceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespaceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterWhitespaceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitWhitespaceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespaceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhitespaceListContext whitespaceList() {
		WhitespaceListContext _localctx = new WhitespaceListContext(Context, State);
		EnterRule(_localctx, 140, RULE_whitespaceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TWhiteSpace || _la==CRLF) {
				{
				{
				State = 575; whitespace();
				}
				}
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhitespaceContext : ParserRuleContext {
		public ITerminalNode TWhiteSpace() { return GetToken(MediaWikiParser.TWhiteSpace, 0); }
		public ITerminalNode CRLF() { return GetToken(MediaWikiParser.CRLF, 0); }
		public WhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.EnterWhitespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMediaWikiParserListener typedListener = listener as IMediaWikiParserListener;
			if (typedListener != null) typedListener.ExitWhitespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMediaWikiParserVisitor<TResult> typedVisitor = visitor as IMediaWikiParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhitespaceContext whitespace() {
		WhitespaceContext _localctx = new WhitespaceContext(Context, State);
		EnterRule(_localctx, 142, RULE_whitespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			_la = TokenStream.LA(1);
			if ( !(_la==TWhiteSpace || _la==CRLF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return specialBlockWithComment_sempred((SpecialBlockWithCommentContext)_localctx, predIndex);
		case 26: return textLine_sempred((TextLineContext)_localctx, predIndex);
		}
		return true;
	}
	private bool specialBlockWithComment_sempred(SpecialBlockWithCommentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return isSpecialToken();
		}
		return true;
	}
	private bool textLine_sempred(TextLineContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return !isSpecialToken();
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '/', '\x24A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x3', '\x2', '\a', '\x2', '\x94', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x97', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x9D', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\xAA', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xB0', '\n', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\xB3', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\xB9', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\xBE', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\xC1', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\xC5', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\xCA', '\n', '\v', '\f', '\v', '\xE', '\v', '\xCD', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\xD1', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xD5', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xD9', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xDD', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xE1', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xE5', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xEA', '\n', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xEE', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xF2', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\xF5', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\xF9', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xFC', 
		'\v', '\x11', '\x3', '\x12', '\a', '\x12', '\xFF', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\x102', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x106', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x10A', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x10D', '\v', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x113', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x117', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x11B', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x11E', '\v', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x124', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x127', '\v', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\a', '\x16', '\x12B', '\n', '\x16', '\f', '\x16', 
		'\xE', '\x16', '\x12E', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x132', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', 
		'\x136', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x139', '\v', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', 
		'\x13F', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x142', '\v', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x146', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\x149', '\v', '\x18', '\x3', '\x19', '\x5', '\x19', 
		'\x14C', '\n', '\x19', '\x3', '\x19', '\x5', '\x19', '\x14F', '\n', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x153', '\n', '\x1A', '\x3', 
		'\x1B', '\x6', '\x1B', '\x156', '\n', '\x1B', '\r', '\x1B', '\xE', '\x1B', 
		'\x157', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x6', '\x1C', '\x15D', 
		'\n', '\x1C', '\r', '\x1C', '\xE', '\x1C', '\x15E', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x167', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x172', '\n', '\x1D', '\x3', '\x1E', '\x6', 
		'\x1E', '\x175', '\n', '\x1E', '\r', '\x1E', '\xE', '\x1E', '\x176', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x180', '\n', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x6', '\"', '\x185', '\n', '\"', '\r', '\"', '\xE', '\"', 
		'\x186', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '$', '\x3', '$', '\x5', '$', '\x190', '\n', '$', '\x3', '%', '\x3', 
		'%', '\x3', '&', '\x6', '&', '\x195', '\n', '&', '\r', '&', '\xE', '&', 
		'\x196', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '(', '\x3', '(', '\x5', '(', '\x1A0', '\n', '(', '\x3', ')', '\x3', 
		')', '\x3', '*', '\x6', '*', '\x1A5', '\n', '*', '\r', '*', '\xE', '*', 
		'\x1A6', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x1B0', '\n', ',', '\x3', '-', '\x3', '-', 
		'\x3', '.', '\x6', '.', '\x1B5', '\n', '.', '\r', '.', '\xE', '.', '\x1B6', 
		'\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x1C0', '\n', '\x30', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x5', 
		'\x33', '\x1C8', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\a', '\x34', '\x1CD', '\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x1D0', 
		'\v', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\a', '\x35', '\x1D7', '\n', '\x35', '\f', '\x35', '\xE', 
		'\x35', '\x1DA', '\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x1E1', '\n', '\x36', '\f', 
		'\x36', '\xE', '\x36', '\x1E4', '\v', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x1EB', '\n', 
		'\x37', '\f', '\x37', '\xE', '\x37', '\x1EE', '\v', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', '<', 
		'\a', '<', '\x1FC', '\n', '<', '\f', '<', '\xE', '<', '\x1FF', '\v', '<', 
		'\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x20A', '\n', '@', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\a', '\x41', '\x210', 
		'\n', '\x41', '\f', '\x41', '\xE', '\x41', '\x213', '\v', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\a', '\x42', '\x21C', '\n', '\x42', '\f', '\x42', 
		'\xE', '\x42', '\x21F', '\v', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\a', 
		'\x43', '\x228', '\n', '\x43', '\f', '\x43', '\xE', '\x43', '\x22B', '\v', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x23A', 
		'\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'H', '\a', 'H', '\x243', '\n', 'H', '\f', 
		'H', '\xE', 'H', '\x246', '\v', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x2', '\x2', 'J', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', 
		'\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x2', '\n', '\x6', '\x2', '\x4', 
		'\x4', '\x14', '\x16', '\x19', '\x1C', '!', '#', '\x6', '\x2', '\x4', 
		'\x4', '\x14', '\x16', '\x19', '\x1C', '!', '\"', '\x5', '\x2', '\x14', 
		'\x16', '\x19', '\x1C', '!', '#', '\x6', '\x2', '\x4', '\x4', '\x14', 
		'\x16', '\x1B', '\x1C', '#', '#', '\x6', '\x2', '\x4', '\x4', '\x14', 
		'\x16', '\x1A', '\x1C', '\"', '#', '\x4', '\x2', '\x19', '\x19', '!', 
		'!', '\x3', '\x2', '$', '%', '\x4', '\x2', '\x16', '\x16', '\x18', '\x18', 
		'\x2', '\x24A', '\x2', '\x95', '\x3', '\x2', '\x2', '\x2', '\x4', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\xA9', '\x3', '\x2', '\x2', '\x2', '\n', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xE', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xD0', '\x3', '\x2', '\x2', '\x2', '\x18', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xDE', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xF6', '\x3', '\x2', '\x2', '\x2', '\"', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x112', '\x3', '\x2', '\x2', '\x2', '(', '\x114', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x11F', '\x3', '\x2', '\x2', '\x2', ',', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x32', '\x150', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x155', '\x3', '\x2', '\x2', '\x2', '\x36', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x171', '\x3', '\x2', '\x2', '\x2', 
		':', '\x174', '\x3', '\x2', '\x2', '\x2', '<', '\x17A', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x17F', '\x3', '\x2', '\x2', '\x2', '@', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x46', '\x18F', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x191', '\x3', '\x2', '\x2', '\x2', 'J', '\x194', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x19F', '\x3', '\x2', '\x2', '\x2', 'P', '\x1A1', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1A4', '\x3', '\x2', '\x2', '\x2', 'T', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x1B1', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1B4', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x1BA', '\x3', '\x2', '\x2', '\x2', '^', '\x1BF', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x64', '\x1C7', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x1C9', '\x3', '\x2', '\x2', '\x2', 'h', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x1E7', '\x3', '\x2', '\x2', '\x2', 'n', '\x1F1', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x1F3', '\x3', '\x2', '\x2', '\x2', 'r', '\x1F5', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x1F8', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x1FD', '\x3', '\x2', '\x2', '\x2', 'x', '\x200', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x202', '\x3', '\x2', '\x2', '\x2', '|', '\x204', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x82', '\x217', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x223', '\x3', '\x2', '\x2', '\x2', '\x86', '\x239', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x23B', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x23F', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x244', '\x3', '\x2', '\x2', '\x2', '\x90', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\x5', '\x4', '\x3', '\x2', 
		'\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\x2', 
		'\x2', '\x3', '\x99', '\x3', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', 
		'\x5', '\x6', '\x4', '\x2', '\x9B', '\x9D', '\x5', '\x34', '\x1B', '\x2', 
		'\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\x5', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', 
		'\x5', 'v', '<', '\x2', '\x9F', '\xA0', '\x6', '\x4', '\x2', '\x2', '\xA0', 
		'\xA1', '\x5', '\b', '\x5', '\x2', '\xA1', '\xA2', '\x5', 'v', '<', '\x2', 
		'\xA2', '\xA3', '\a', '\x18', '\x2', '\x2', '\xA3', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xAA', '\x5', '\n', '\x6', '\x2', '\xA5', '\xAA', 
		'\x5', '\xE', '\b', '\x2', '\xA6', '\xAA', '\x5', '\x10', '\t', '\x2', 
		'\xA7', '\xAA', '\x5', '\x14', '\v', '\x2', '\xA8', '\xAA', '\x5', '\x1C', 
		'\xF', '\x2', '\xA9', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\t', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAF', 
		'\x5', '\f', '\a', '\x2', '\xAC', '\xAD', '\x5', 'J', '&', '\x2', '\xAD', 
		'\xAE', '\x5', '\f', '\a', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB3', '\x5', ':', '\x1E', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x4', '\x2', '\x2', '\xB5', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB8', '\a', '\x3', '\x2', 
		'\x2', '\xB7', '\xB9', '\x5', ':', '\x1E', '\x2', '\xB8', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBF', '\x5', '\x12', '\n', 
		'\x2', '\xBB', '\xBC', '\a', '\x18', '\x2', '\x2', '\xBC', '\xBE', '\x5', 
		'\x12', '\n', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC4', '\a', '\a', '\x2', '\x2', '\xC3', '\xC5', '\x5', ':', '\x1E', 
		'\x2', '\xC4', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\x13', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xCB', '\x5', '\x16', '\f', '\x2', '\xC7', '\xC8', '\a', '\x18', '\x2', 
		'\x2', '\xC8', '\xCA', '\x5', '\x16', '\f', '\x2', '\xC9', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\x15', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xD1', '\x5', '\x18', '\r', '\x2', '\xCF', 
		'\xD1', '\x5', '\x1A', '\xE', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD4', '\a', '\x6', '\x2', '\x2', '\xD3', 
		'\xD5', '\x5', ':', '\x1E', '\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD8', '\a', '\x5', '\x2', '\x2', '\xD7', 
		'\xD9', '\x5', '\x42', '\"', '\x2', '\xD8', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '#', '\x2', '\x2', '\xDB', 
		'\xDD', '\x5', ':', '\x1E', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xE0', '\a', '\b', '\x2', '\x2', '\xDF', 
		'\xE1', '\x5', ':', '\x1E', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE4', '\a', '\x18', '\x2', '\x2', '\xE3', 
		'\xE5', '\x5', '\x1E', '\x10', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE7', '\x5', ' ', '\x11', '\x2', '\xE7', 
		'\xE9', '\a', ',', '\x2', '\x2', '\xE8', '\xEA', '\x5', ':', '\x1E', '\x2', 
		'\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xED', 
		'\a', '-', '\x2', '\x2', '\xEC', '\xEE', '\x5', ':', '\x1E', '\x2', '\xED', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF3', '\a', 
		'\x18', '\x2', '\x2', '\xF0', '\xF2', '\x5', '\x4', '\x3', '\x2', '\xF1', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xFA', '\x5', '\"', '\x12', 
		'\x2', '\xF7', '\xF9', '\x5', '$', '\x13', '\x2', '\xF8', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '!', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFF', '\x5', '&', '\x14', '\x2', '\xFE', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x105', '\a', 
		'.', '\x2', '\x2', '\x104', '\x106', '\x5', ':', '\x1E', '\x2', '\x105', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x10B', 
		'\a', '\x18', '\x2', '\x2', '\x108', '\x10A', '\x5', '&', '\x14', '\x2', 
		'\x109', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x113', 
		'\x5', '(', '\x15', '\x2', '\x10F', '\x113', '\x5', '*', '\x16', '\x2', 
		'\x110', '\x113', '\x5', ',', '\x17', '\x2', '\x111', '\x113', '\x5', 
		'.', '\x18', '\x2', '\x112', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x116', '\a', '\x1A', '\x2', '\x2', '\x115', 
		'\x117', '\x5', '\x30', '\x19', '\x2', '\x116', '\x115', '\x3', '\x2', 
		'\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x11C', '\a', '\x18', '\x2', '\x2', 
		'\x119', '\x11B', '\x5', '\x4', '\x3', '\x2', '\x11A', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', ')', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x120', '\a', '\x1A', '\x2', '\x2', '\x120', 
		'\x125', '\x5', '\x30', '\x19', '\x2', '\x121', '\x122', '\a', '\"', '\x2', 
		'\x2', '\x122', '\x124', '\x5', '\x30', '\x19', '\x2', '\x123', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x128', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12C', '\a', '\x18', '\x2', 
		'\x2', '\x129', '\x12B', '\x5', '\x4', '\x3', '\x2', '\x12A', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '+', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x131', '\a', '\x19', '\x2', 
		'\x2', '\x130', '\x132', '\x5', '\x30', '\x19', '\x2', '\x131', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x133', '\x3', '\x2', '\x2', '\x2', '\x133', '\x137', '\a', 
		'\x18', '\x2', '\x2', '\x134', '\x136', '\x5', '\x4', '\x3', '\x2', '\x135', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x136', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x135', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x139', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', 
		'\x19', '\x2', '\x2', '\x13B', '\x140', '\x5', '\x30', '\x19', '\x2', 
		'\x13C', '\x13D', '\a', '!', '\x2', '\x2', '\x13D', '\x13F', '\x5', '\x30', 
		'\x19', '\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x140', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x147', '\a', '\x18', '\x2', '\x2', '\x144', '\x146', '\x5', 
		'\x4', '\x3', '\x2', '\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x147', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\x3', '\x2', '\x2', '\x2', '\x148', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x147', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x14C', '\x5', 'R', '*', '\x2', '\x14B', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x14F', '\x5', '\x32', '\x1A', '\x2', 
		'\x14E', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x31', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x152', '\a', '\x19', '\x2', '\x2', '\x151', '\x153', '\x5', 'R', '*', 
		'\x2', '\x152', '\x151', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x156', '\x5', '\x36', '\x1C', '\x2', '\x155', '\x154', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x155', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x35', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', 
		'\x5', 'v', '<', '\x2', '\x15A', '\x15C', '\x6', '\x1C', '\x3', '\x2', 
		'\x15B', '\x15D', '\x5', '>', ' ', '\x2', '\x15C', '\x15B', '\x3', '\x2', 
		'\x2', '\x2', '\x15D', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\x5', 
		'v', '<', '\x2', '\x161', '\x162', '\a', '\x18', '\x2', '\x2', '\x162', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x5', 'v', '<', 
		'\x2', '\x164', '\x165', '\a', '\x18', '\x2', '\x2', '\x165', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x163', '\x3', '\x2', '\x2', '\x2', '\x167', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x172', '\x5', '\x62', '\x32', '\x2', '\x169', 
		'\x172', '\x5', '\x64', '\x33', '\x2', '\x16A', '\x172', '\x5', 'j', '\x36', 
		'\x2', '\x16B', '\x172', '\x5', 'l', '\x37', '\x2', '\x16C', '\x172', 
		'\x5', 'n', '\x38', '\x2', '\x16D', '\x172', '\x5', 't', ';', '\x2', '\x16E', 
		'\x172', '\x5', 'z', '>', '\x2', '\x16F', '\x172', '\x5', '|', '?', '\x2', 
		'\x170', '\x172', '\x5', '~', '@', '\x2', '\x171', '\x168', '\x3', '\x2', 
		'\x2', '\x2', '\x171', '\x169', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x171', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x39', '\x3', '\x2', '\x2', '\x2', '\x173', '\x175', 
		'\x5', '<', '\x1F', '\x2', '\x174', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x174', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x178', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x5', 'v', '<', 
		'\x2', '\x179', ';', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', '\x5', 
		'v', '<', '\x2', '\x17B', '\x17C', '\x5', '>', ' ', '\x2', '\x17C', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x17D', '\x180', '\x5', '\x38', '\x1D', '\x2', 
		'\x17E', '\x180', '\x5', '@', '!', '\x2', '\x17F', '\x17D', '\x3', '\x2', 
		'\x2', '\x2', '\x17F', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x180', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\t', '\x2', '\x2', '\x2', 
		'\x182', '\x41', '\x3', '\x2', '\x2', '\x2', '\x183', '\x185', '\x5', 
		'\x44', '#', '\x2', '\x184', '\x183', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x186', '\x184', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x188', '\x189', '\x5', 'v', '<', '\x2', 
		'\x189', '\x43', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\x5', 
		'v', '<', '\x2', '\x18B', '\x18C', '\x5', '\x46', '$', '\x2', '\x18C', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x190', '\x5', '\x38', '\x1D', 
		'\x2', '\x18E', '\x190', '\x5', 'H', '%', '\x2', '\x18F', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\t', '\x3', '\x2', 
		'\x2', '\x192', 'I', '\x3', '\x2', '\x2', '\x2', '\x193', '\x195', '\x5', 
		'L', '\'', '\x2', '\x194', '\x193', '\x3', '\x2', '\x2', '\x2', '\x195', 
		'\x196', '\x3', '\x2', '\x2', '\x2', '\x196', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x197', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\x5', 'v', '<', '\x2', 
		'\x199', 'K', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\x5', 'v', 
		'<', '\x2', '\x19B', '\x19C', '\x5', 'N', '(', '\x2', '\x19C', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x1A0', '\x5', '\x38', '\x1D', '\x2', '\x19E', 
		'\x1A0', '\x5', 'P', ')', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A0', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\t', '\x4', '\x2', '\x2', '\x1A2', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A5', '\x5', 'T', '+', '\x2', 
		'\x1A4', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1A9', '\x5', 'v', '<', '\x2', '\x1A9', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x5', 'v', '<', '\x2', '\x1AB', 
		'\x1AC', '\x5', 'V', ',', '\x2', '\x1AC', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1B0', '\x5', '\x38', '\x1D', '\x2', '\x1AE', '\x1B0', '\x5', 
		'X', '-', '\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B0', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x1B1', '\x1B2', '\t', '\x5', '\x2', '\x2', '\x1B2', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x1B3', '\x1B5', '\x5', '\\', '/', '\x2', '\x1B4', 
		'\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1B9', '\x5', 'v', '<', '\x2', '\x1B9', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x1BA', '\x1BB', '\x5', 'v', '<', '\x2', '\x1BB', '\x1BC', 
		'\x5', '^', '\x30', '\x2', '\x1BC', ']', '\x3', '\x2', '\x2', '\x2', '\x1BD', 
		'\x1C0', '\x5', '\x38', '\x1D', '\x2', '\x1BE', '\x1C0', '\x5', '`', '\x31', 
		'\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1C0', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x1C1', '\x1C2', '\t', '\x6', '\x2', '\x2', '\x1C2', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x1C3', '\x1C4', '\a', '\t', '\x2', '\x2', '\x1C4', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C8', '\x5', '\x66', '\x34', '\x2', 
		'\x1C6', '\x1C8', '\x5', 'h', '\x35', '\x2', '\x1C7', '\x1C5', '\x3', 
		'\x2', '\x2', '\x2', '\x1C7', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C8', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\a', '\n', '\x2', 
		'\x2', '\x1CA', '\x1CE', '\x5', 'Z', '.', '\x2', '\x1CB', '\x1CD', '\x5', 
		'r', ':', '\x2', '\x1CC', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CD', 
		'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CC', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1D2', '\a', '\x1D', '\x2', '\x2', '\x1D2', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x1D3', '\x1D4', '\a', '\v', '\x2', '\x2', '\x1D4', '\x1D8', 
		'\x5', 'Z', '.', '\x2', '\x1D5', '\x1D7', '\x5', 'r', ':', '\x2', '\x1D6', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x1DA', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\a', 
		'\x1E', '\x2', '\x2', '\x1DC', 'i', '\x3', '\x2', '\x2', '\x2', '\x1DD', 
		'\x1DE', '\a', '\r', '\x2', '\x2', '\x1DE', '\x1E2', '\x5', 'Z', '.', 
		'\x2', '\x1DF', '\x1E1', '\x5', 'r', ':', '\x2', '\x1E0', '\x1DF', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E2', 
		'\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E6', '\a', ' ', '\x2', '\x2', 
		'\x1E6', 'k', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\a', '\f', 
		'\x2', '\x2', '\x1E8', '\x1EC', '\x5', 'Z', '.', '\x2', '\x1E9', '\x1EB', 
		'\x5', 'r', ':', '\x2', '\x1EA', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1EA', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1ED', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1EF', '\x1F0', '\a', '\x1F', '\x2', '\x2', '\x1F0', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\a', '\xF', '\x2', '\x2', '\x1F2', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\t', '\a', '\x2', 
		'\x2', '\x1F4', 'q', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\x5', 
		'p', '\x39', '\x2', '\x1F6', '\x1F7', '\x5', 'Z', '.', '\x2', '\x1F7', 
		's', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\t', '\b', '\x2', 
		'\x2', '\x1F9', 'u', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FC', '\x5', 
		'x', '=', '\x2', '\x1FB', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FC', 
		'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FB', '\x3', '\x2', '\x2', 
		'\x2', '\x1FD', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FE', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x1FF', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x201', '\a', '\xE', '\x2', '\x2', '\x201', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x202', '\x203', '\a', '\x11', '\x2', '\x2', '\x203', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x204', '\x205', '\a', '\x10', '\x2', '\x2', '\x205', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x206', '\x20A', '\x5', '\x80', '\x41', 
		'\x2', '\x207', '\x20A', '\x5', '\x82', '\x42', '\x2', '\x208', '\x20A', 
		'\x5', '\x84', '\x43', '\x2', '\x209', '\x206', '\x3', '\x2', '\x2', '\x2', 
		'\x209', '\x207', '\x3', '\x2', '\x2', '\x2', '\x209', '\x208', '\x3', 
		'\x2', '\x2', '\x2', '\x20A', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x20B', 
		'\x20C', '\a', '\x13', '\x2', '\x2', '\x20C', '\x20D', '\x5', '\x8E', 
		'H', '\x2', '\x20D', '\x211', '\x5', '\x8C', 'G', '\x2', '\x20E', '\x210', 
		'\x5', '\x86', '\x44', '\x2', '\x20F', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x210', '\x213', '\x3', '\x2', '\x2', '\x2', '\x211', '\x20F', '\x3', 
		'\x2', '\x2', '\x2', '\x211', '\x212', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x214', '\x3', '\x2', '\x2', '\x2', '\x213', '\x211', '\x3', '\x2', '\x2', 
		'\x2', '\x214', '\x215', '\x5', '\x8E', 'H', '\x2', '\x215', '\x216', 
		'\a', '&', '\x2', '\x2', '\x216', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x218', '\a', '\x12', '\x2', '\x2', '\x218', '\x219', '\x5', 
		'\x8E', 'H', '\x2', '\x219', '\x21D', '\x5', '\x8C', 'G', '\x2', '\x21A', 
		'\x21C', '\x5', '\x86', '\x44', '\x2', '\x21B', '\x21A', '\x3', '\x2', 
		'\x2', '\x2', '\x21C', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', 
		'\x21E', '\x220', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x21D', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x221', '\x5', '\x8E', 'H', '\x2', '\x221', 
		'\x222', '\a', '+', '\x2', '\x2', '\x222', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x223', '\x224', '\a', '\x13', '\x2', '\x2', '\x224', '\x225', 
		'\x5', '\x8E', 'H', '\x2', '\x225', '\x229', '\x5', '\x8C', 'G', '\x2', 
		'\x226', '\x228', '\x5', '\x86', '\x44', '\x2', '\x227', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x228', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x229', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x229', 
		'\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\x5', '\x8E', 'H', '\x2', 
		'\x22D', '\x22E', '\a', '\'', '\x2', '\x2', '\x22E', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x22F', '\x230', '\x5', '\x8E', 'H', '\x2', '\x230', '\x231', 
		'\x5', '\x88', '\x45', '\x2', '\x231', '\x232', '\x5', '\x8E', 'H', '\x2', 
		'\x232', '\x233', '\a', '(', '\x2', '\x2', '\x233', '\x234', '\x5', '\x8E', 
		'H', '\x2', '\x234', '\x235', '\x5', '\x8A', '\x46', '\x2', '\x235', '\x23A', 
		'\x3', '\x2', '\x2', '\x2', '\x236', '\x237', '\x5', '\x8E', 'H', '\x2', 
		'\x237', '\x238', '\x5', '\x88', '\x45', '\x2', '\x238', '\x23A', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x239', 
		'\x236', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x23B', '\x23C', '\a', ')', '\x2', '\x2', '\x23C', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x23D', '\x23E', '\a', '*', '\x2', '\x2', '\x23E', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\a', ')', '\x2', 
		'\x2', '\x240', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x241', '\x243', 
		'\x5', '\x90', 'I', '\x2', '\x242', '\x241', '\x3', '\x2', '\x2', '\x2', 
		'\x243', '\x246', '\x3', '\x2', '\x2', '\x2', '\x244', '\x242', '\x3', 
		'\x2', '\x2', '\x2', '\x244', '\x245', '\x3', '\x2', '\x2', '\x2', '\x245', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x246', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x248', '\t', '\t', '\x2', '\x2', '\x248', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x95', '\x9C', '\xA9', '\xAF', '\xB2', '\xB8', 
		'\xBF', '\xC4', '\xCB', '\xD0', '\xD4', '\xD8', '\xDC', '\xE0', '\xE4', 
		'\xE9', '\xED', '\xF3', '\xFA', '\x100', '\x105', '\x10B', '\x112', '\x116', 
		'\x11C', '\x125', '\x12C', '\x131', '\x137', '\x140', '\x147', '\x14B', 
		'\x14E', '\x152', '\x157', '\x15E', '\x166', '\x171', '\x176', '\x17F', 
		'\x186', '\x18F', '\x196', '\x19F', '\x1A6', '\x1AF', '\x1B6', '\x1BF', 
		'\x1C7', '\x1CE', '\x1D8', '\x1E2', '\x1EC', '\x1FD', '\x209', '\x211', 
		'\x21D', '\x229', '\x239', '\x244',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DevToolsX.Documents.Compilers.MediaWiki.Syntax.InternalSyntax

