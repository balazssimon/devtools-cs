parser grammar SeleniumUIParser;

options
{
	tokenVocab = SeleniumUILexer;
	generateCompiler = true;
}

$Root
main: $Property(Symbols) namespace* EOF;

$SymbolDef(symbolType=Namespace,nestingProperty=Declarations,merge=true)
namespace : KNamespace qualifiedName namespaceBody;

$Body
namespaceBody: TOpenBrace declaration* TCloseBrace;

$Property(Declarations)
declaration: tag | element;


$SymbolDef(Tag)
tag: KTag typeSpecifier name htmlTagLocatorSpecifier? TSemicolon;

typeSpecifier: $Property(TypeName) $Value qualifier;


$SymbolDef(Element)
element: elementOrPage name baseElement? htmlTagLocatorSpecifier? elementBody;

$Property(IsPage)
elementOrPage
	: $Value(true) KPage 
	| $Value(false) KElement
	;

$Property(Base)
baseElement: TColon $Property(Element) $SymbolUse(Element) qualifier;

elementBody: emptyElementBody | childElementsBody;

emptyElementBody: TSemicolon;

$Body
childElementsBody: TOpenBrace childElement* TCloseBrace;

$Property(Elements)
$SymbolDef(Element)
childElement: elementTypeSpecifier? name htmlTagLocatorSpecifier? elementBody;

elementTypeSpecifier: $Property(Type) $SymbolUse(ElementType) qualifier;

htmlTagLocatorSpecifier: TAssign htmlTagSpecifier? locatorSpecifier?;
htmlTagSpecifier: TOpenBracket $Property(DeclaredHtmlTag) $Value string TCloseBracket;
locatorSpecifier: $Property(DeclaredLocator) $Value string;

$Name
qualifiedName: qualifier;

$Name
name: identifier;

$Qualifier
qualifier: identifier (TDot identifier)*;

$Identifier
identifier: LIdentifier;

string: LRegularString | LDoubleQuoteVerbatimString | LSingleQuoteVerbatimString;
