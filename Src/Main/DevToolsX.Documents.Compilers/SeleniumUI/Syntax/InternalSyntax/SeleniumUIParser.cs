//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SeleniumUIParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DevToolsX.Documents.Compilers.SeleniumUI.Syntax.InternalSyntax {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SeleniumUIParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KParent=1, KAncestor=2, KNamespace=3, KPage=4, KElement=5, KTag=6, TSemicolon=7, 
		TColon=8, TDot=9, TComma=10, TAssign=11, TOpenParen=12, TCloseParen=13, 
		TOpenBracket=14, TCloseBracket=15, TOpenBrace=16, TCloseBrace=17, TLessThan=18, 
		TGreaterThan=19, TQuestion=20, LIdentifier=21, LInteger=22, LDecimal=23, 
		LScientific=24, LRegularString=25, LUtf8Bom=26, LWhiteSpace=27, LCrLf=28, 
		LLineEnd=29, LSingleLineComment=30, LComment=31, LDoubleQuoteVerbatimString=32, 
		LSingleQuoteVerbatimString=33, DoubleQuoteVerbatimStringLiteralStart=34, 
		SingleQuoteVerbatimStringLiteralStart=35, LCommentStart=36, LComment_Star=37;
	public const int
		RULE_main = 0, RULE_namespace = 1, RULE_namespaceBody = 2, RULE_declaration = 3, 
		RULE_tag = 4, RULE_typeSpecifier = 5, RULE_page = 6, RULE_element = 7, 
		RULE_tagSpecifier = 8, RULE_locatorSpecifier = 9, RULE_elementBody = 10, 
		RULE_emptyElementBody = 11, RULE_childElementsBody = 12, RULE_qualifiedName = 13, 
		RULE_name = 14, RULE_qualifier = 15, RULE_identifier = 16, RULE_string = 17;
	public static readonly string[] ruleNames = {
		"main", "namespace", "namespaceBody", "declaration", "tag", "typeSpecifier", 
		"page", "element", "tagSpecifier", "locatorSpecifier", "elementBody", 
		"emptyElementBody", "childElementsBody", "qualifiedName", "name", "qualifier", 
		"identifier", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'parent'", "'ancestor'", "'namespace'", "'page'", "'element'", 
		"'tag'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", null, null, null, null, null, null, 
		null, null, null, null, null, "'\"'", "'''", "'@\"'", "'@''", "'/*'", 
		"'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KParent", "KAncestor", "KNamespace", "KPage", "KElement", "KTag", 
		"TSemicolon", "TColon", "TDot", "TComma", "TAssign", "TOpenParen", "TCloseParen", 
		"TOpenBracket", "TCloseBracket", "TOpenBrace", "TCloseBrace", "TLessThan", 
		"TGreaterThan", "TQuestion", "LIdentifier", "LInteger", "LDecimal", "LScientific", 
		"LRegularString", "LUtf8Bom", "LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", 
		"LComment", "LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", 
		"DoubleQuoteVerbatimStringLiteralStart", "SingleQuoteVerbatimStringLiteralStart", 
		"LCommentStart", "LComment_Star"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeleniumUIParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SeleniumUIParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeleniumUIParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeleniumUIParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class MainContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SeleniumUIParser.Eof, 0); }
		public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KNamespace) {
				{
				{
				State = 36; @namespace();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 42; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(SeleniumUIParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(KNamespace);
			State = 45; qualifiedName();
			State = 46; namespaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SeleniumUIParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SeleniumUIParser.TCloseBrace, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterNamespaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitNamespaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(TOpenBrace);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KPage || _la==KTag) {
				{
				{
				State = 49; declaration();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public PageContext page() {
			return GetRuleContext<PageContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KTag:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; tag();
				}
				break;
			case KPage:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; page();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public ITerminalNode KTag() { return GetToken(SeleniumUIParser.KTag, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SeleniumUIParser.TSemicolon, 0); }
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 8, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(KTag);
			State = 62; name();
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TColon) {
				{
				State = 63; typeSpecifier();
				}
			}

			State = 66; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public ITerminalNode TColon() { return GetToken(SeleniumUIParser.TColon, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(TColon);
			State = 69; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PageContext : ParserRuleContext {
		public ITerminalNode KPage() { return GetToken(SeleniumUIParser.KPage, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ElementBodyContext elementBody() {
			return GetRuleContext<ElementBodyContext>(0);
		}
		public PageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_page; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterPage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitPage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PageContext page() {
		PageContext _localctx = new PageContext(Context, State);
		EnterRule(_localctx, 12, RULE_page);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(KPage);
			State = 72; name();
			State = 73; elementBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ITerminalNode KElement() { return GetToken(SeleniumUIParser.KElement, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public LocatorSpecifierContext locatorSpecifier() {
			return GetRuleContext<LocatorSpecifierContext>(0);
		}
		public ElementBodyContext elementBody() {
			return GetRuleContext<ElementBodyContext>(0);
		}
		public TagSpecifierContext tagSpecifier() {
			return GetRuleContext<TagSpecifierContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 14, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(KElement);
			State = 76; name();
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TColon) {
				{
				State = 77; tagSpecifier();
				}
			}

			State = 80; locatorSpecifier();
			State = 81; elementBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagSpecifierContext : ParserRuleContext {
		public ITerminalNode TColon() { return GetToken(SeleniumUIParser.TColon, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public TagSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterTagSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitTagSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagSpecifierContext tagSpecifier() {
		TagSpecifierContext _localctx = new TagSpecifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_tagSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(TColon);
			State = 84; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatorSpecifierContext : ParserRuleContext {
		public ITerminalNode TAssign() { return GetToken(SeleniumUIParser.TAssign, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public LocatorSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatorSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterLocatorSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitLocatorSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatorSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatorSpecifierContext locatorSpecifier() {
		LocatorSpecifierContext _localctx = new LocatorSpecifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_locatorSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(TAssign);
			State = 87; @string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementBodyContext : ParserRuleContext {
		public EmptyElementBodyContext emptyElementBody() {
			return GetRuleContext<EmptyElementBodyContext>(0);
		}
		public ChildElementsBodyContext childElementsBody() {
			return GetRuleContext<ChildElementsBodyContext>(0);
		}
		public ElementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterElementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitElementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementBodyContext elementBody() {
		ElementBodyContext _localctx = new ElementBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_elementBody);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TSemicolon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; emptyElementBody();
				}
				break;
			case TOpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90; childElementsBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyElementBodyContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(SeleniumUIParser.TSemicolon, 0); }
		public EmptyElementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyElementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterEmptyElementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitEmptyElementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyElementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyElementBodyContext emptyElementBody() {
		EmptyElementBodyContext _localctx = new EmptyElementBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_emptyElementBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChildElementsBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SeleniumUIParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SeleniumUIParser.TCloseBrace, 0); }
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ChildElementsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_childElementsBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterChildElementsBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitChildElementsBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChildElementsBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChildElementsBodyContext childElementsBody() {
		ChildElementsBodyContext _localctx = new ChildElementsBodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_childElementsBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(TOpenBrace);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KElement) {
				{
				{
				State = 96; element();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 28, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(SeleniumUIParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(SeleniumUIParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitQualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 30, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; identifier();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TDot) {
				{
				{
				State = 109; Match(TDot);
				State = 110; identifier();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode LIdentifier() { return GetToken(SeleniumUIParser.LIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(LIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode LRegularString() { return GetToken(SeleniumUIParser.LRegularString, 0); }
		public ITerminalNode LDoubleQuoteVerbatimString() { return GetToken(SeleniumUIParser.LDoubleQuoteVerbatimString, 0); }
		public ITerminalNode LSingleQuoteVerbatimString() { return GetToken(SeleniumUIParser.LSingleQuoteVerbatimString, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 34, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LRegularString) | (1L << LDoubleQuoteVerbatimString) | (1L << LSingleQuoteVerbatimString))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '{', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', 
		'\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', '\xE', 
		'\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', '\x11', 
		'\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', '\x13', 
		'\x3', '\x2', '\a', '\x2', '(', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'+', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x35', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x38', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '>', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x43', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', 'Q', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '^', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x64', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', 'g', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 'r', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', 'u', '\v', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x2', '\x2', 
		'\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '\x2', 
		'\x3', '\x4', '\x2', '\x1B', '\x1B', '\"', '#', '\x2', 'p', '\x2', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '.', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\b', '=', '\x3', '\x2', '\x2', '\x2', 
		'\n', '?', '\x3', '\x2', '\x2', '\x2', '\f', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'I', '\x3', '\x2', '\x2', '\x2', '\x10', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'U', '\x3', '\x2', '\x2', '\x2', '\x14', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\x16', ']', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', 'j', '\x3', '\x2', '\x2', '\x2', '\x1E', 'l', '\x3', '\x2', 
		'\x2', '\x2', ' ', 'n', '\x3', '\x2', '\x2', '\x2', '\"', 'v', '\x3', 
		'\x2', '\x2', '\x2', '$', 'x', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x5', 
		'\x4', '\x3', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '+', 
		'\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', 
		'*', '\x3', '\x2', '\x2', '\x2', '*', ',', '\x3', '\x2', '\x2', '\x2', 
		'+', ')', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x2', '\x2', '\x3', 
		'-', '\x3', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x5', '\x2', 
		'\x2', '/', '\x30', '\x5', '\x1C', '\xF', '\x2', '\x30', '\x31', '\x5', 
		'\x6', '\x4', '\x2', '\x31', '\x5', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x36', '\a', '\x12', '\x2', '\x2', '\x33', '\x35', '\x5', '\b', '\x5', 
		'\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', 
		'\x13', '\x2', '\x2', ':', '\a', '\x3', '\x2', '\x2', '\x2', ';', '>', 
		'\x5', '\n', '\x6', '\x2', '<', '>', '\x5', '\xE', '\b', '\x2', '=', ';', 
		'\x3', '\x2', '\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '>', 
		'\t', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\b', '\x2', '\x2', 
		'@', '\x42', '\x5', '\x1E', '\x10', '\x2', '\x41', '\x43', '\x5', '\f', 
		'\a', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\a', '\t', '\x2', '\x2', '\x45', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\a', '\n', '\x2', '\x2', 'G', 'H', '\x5', 
		' ', '\x11', '\x2', 'H', '\r', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', 
		'\x6', '\x2', '\x2', 'J', 'K', '\x5', '\x1E', '\x10', '\x2', 'K', 'L', 
		'\x5', '\x16', '\f', '\x2', 'L', '\xF', '\x3', '\x2', '\x2', '\x2', 'M', 
		'N', '\a', '\a', '\x2', '\x2', 'N', 'P', '\x5', '\x1E', '\x10', '\x2', 
		'O', 'Q', '\x5', '\x12', '\n', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x5', '\x14', '\v', '\x2', 'S', 'T', '\x5', '\x16', '\f', '\x2', 
		'T', '\x11', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\n', '\x2', 
		'\x2', 'V', 'W', '\x5', ' ', '\x11', '\x2', 'W', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '\r', '\x2', '\x2', 'Y', 'Z', '\x5', '$', 
		'\x13', '\x2', 'Z', '\x15', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x5', 
		'\x18', '\r', '\x2', '\\', '^', '\x5', '\x1A', '\xE', '\x2', ']', '[', 
		'\x3', '\x2', '\x2', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', '^', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\t', '\x2', '\x2', 
		'`', '\x19', '\x3', '\x2', '\x2', '\x2', '\x61', '\x65', '\a', '\x12', 
		'\x2', '\x2', '\x62', '\x64', '\x5', '\x10', '\t', '\x2', '\x63', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\a', '\x13', '\x2', '\x2', 'i', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'k', '\x5', ' ', '\x11', '\x2', 'k', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x5', '\"', '\x12', '\x2', 'm', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', 'n', 's', '\x5', '\"', '\x12', '\x2', 
		'o', 'p', '\a', '\v', '\x2', '\x2', 'p', 'r', '\x5', '\"', '\x12', '\x2', 
		'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', '!', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\a', '\x17', '\x2', '\x2', 'w', '#', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\t', '\x2', '\x2', '\x2', 'y', '%', '\x3', '\x2', '\x2', '\x2', 
		'\n', ')', '\x36', '=', '\x42', 'P', ']', '\x65', 's',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DevToolsX.Documents.Compilers.SeleniumUI.Syntax.InternalSyntax

