//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SeleniumUIParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DevToolsX.Documents.Compilers.SeleniumUI.Syntax.InternalSyntax {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SeleniumUIParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KParent=1, KAncestor=2, KNamespace=3, KPage=4, KElement=5, KTag=6, TSemicolon=7, 
		TColon=8, TDot=9, TComma=10, TAssign=11, TOpenParen=12, TCloseParen=13, 
		TOpenBracket=14, TCloseBracket=15, TOpenBrace=16, TCloseBrace=17, TLessThan=18, 
		TGreaterThan=19, TQuestion=20, LIdentifier=21, LInteger=22, LDecimal=23, 
		LScientific=24, LRegularString=25, LUtf8Bom=26, LWhiteSpace=27, LCrLf=28, 
		LLineEnd=29, LSingleLineComment=30, LComment=31, LDoubleQuoteVerbatimString=32, 
		LSingleQuoteVerbatimString=33, DoubleQuoteVerbatimStringLiteralStart=34, 
		SingleQuoteVerbatimStringLiteralStart=35, LCommentStart=36, LComment_Star=37;
	public const int
		RULE_main = 0, RULE_namespace = 1, RULE_namespaceBody = 2, RULE_declaration = 3, 
		RULE_tag = 4, RULE_typeSpecifier = 5, RULE_element = 6, RULE_elementOrPage = 7, 
		RULE_baseElement = 8, RULE_elementBody = 9, RULE_emptyElementBody = 10, 
		RULE_childElementsBody = 11, RULE_childElement = 12, RULE_elementTypeSpecifier = 13, 
		RULE_htmlTagLocatorSpecifier = 14, RULE_htmlTagSpecifier = 15, RULE_locatorSpecifier = 16, 
		RULE_qualifiedName = 17, RULE_name = 18, RULE_qualifier = 19, RULE_identifier = 20, 
		RULE_string = 21;
	public static readonly string[] ruleNames = {
		"main", "namespace", "namespaceBody", "declaration", "tag", "typeSpecifier", 
		"element", "elementOrPage", "baseElement", "elementBody", "emptyElementBody", 
		"childElementsBody", "childElement", "elementTypeSpecifier", "htmlTagLocatorSpecifier", 
		"htmlTagSpecifier", "locatorSpecifier", "qualifiedName", "name", "qualifier", 
		"identifier", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'parent'", "'ancestor'", "'namespace'", "'page'", "'element'", 
		"'tag'", "';'", "':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'<'", "'>'", "'?'", null, null, null, null, null, null, 
		null, null, null, null, null, "'\"'", "'''", "'@\"'", "'@''", "'/*'", 
		"'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KParent", "KAncestor", "KNamespace", "KPage", "KElement", "KTag", 
		"TSemicolon", "TColon", "TDot", "TComma", "TAssign", "TOpenParen", "TCloseParen", 
		"TOpenBracket", "TCloseBracket", "TOpenBrace", "TCloseBrace", "TLessThan", 
		"TGreaterThan", "TQuestion", "LIdentifier", "LInteger", "LDecimal", "LScientific", 
		"LRegularString", "LUtf8Bom", "LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", 
		"LComment", "LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", 
		"DoubleQuoteVerbatimStringLiteralStart", "SingleQuoteVerbatimStringLiteralStart", 
		"LCommentStart", "LComment_Star"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeleniumUIParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SeleniumUIParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeleniumUIParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeleniumUIParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class MainContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SeleniumUIParser.Eof, 0); }
		public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KNamespace) {
				{
				{
				State = 44; @namespace();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode KNamespace() { return GetToken(SeleniumUIParser.KNamespace, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(KNamespace);
			State = 53; qualifiedName();
			State = 54; namespaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SeleniumUIParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SeleniumUIParser.TCloseBrace, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterNamespaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitNamespaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext namespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(TOpenBrace);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KPage) | (1L << KElement) | (1L << KTag))) != 0)) {
				{
				{
				State = 57; declaration();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 63; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KTag:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; tag();
				}
				break;
			case KPage:
			case KElement:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; element();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public ITerminalNode KTag() { return GetToken(SeleniumUIParser.KTag, 0); }
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TSemicolon() { return GetToken(SeleniumUIParser.TSemicolon, 0); }
		public HtmlTagLocatorSpecifierContext htmlTagLocatorSpecifier() {
			return GetRuleContext<HtmlTagLocatorSpecifierContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 8, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(KTag);
			State = 70; typeSpecifier();
			State = 71; name();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 72; htmlTagLocatorSpecifier();
				}
			}

			State = 75; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ElementOrPageContext elementOrPage() {
			return GetRuleContext<ElementOrPageContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ElementBodyContext elementBody() {
			return GetRuleContext<ElementBodyContext>(0);
		}
		public BaseElementContext baseElement() {
			return GetRuleContext<BaseElementContext>(0);
		}
		public HtmlTagLocatorSpecifierContext htmlTagLocatorSpecifier() {
			return GetRuleContext<HtmlTagLocatorSpecifierContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 12, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; elementOrPage();
			State = 80; name();
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TColon) {
				{
				State = 81; baseElement();
				}
			}

			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 84; htmlTagLocatorSpecifier();
				}
			}

			State = 87; elementBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementOrPageContext : ParserRuleContext {
		public ITerminalNode KPage() { return GetToken(SeleniumUIParser.KPage, 0); }
		public ITerminalNode KElement() { return GetToken(SeleniumUIParser.KElement, 0); }
		public ElementOrPageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementOrPage; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterElementOrPage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitElementOrPage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementOrPage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementOrPageContext elementOrPage() {
		ElementOrPageContext _localctx = new ElementOrPageContext(Context, State);
		EnterRule(_localctx, 14, RULE_elementOrPage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_la = TokenStream.LA(1);
			if ( !(_la==KPage || _la==KElement) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseElementContext : ParserRuleContext {
		public ITerminalNode TColon() { return GetToken(SeleniumUIParser.TColon, 0); }
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public BaseElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterBaseElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitBaseElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseElementContext baseElement() {
		BaseElementContext _localctx = new BaseElementContext(Context, State);
		EnterRule(_localctx, 16, RULE_baseElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(TColon);
			State = 92; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementBodyContext : ParserRuleContext {
		public EmptyElementBodyContext emptyElementBody() {
			return GetRuleContext<EmptyElementBodyContext>(0);
		}
		public ChildElementsBodyContext childElementsBody() {
			return GetRuleContext<ChildElementsBodyContext>(0);
		}
		public ElementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterElementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitElementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementBodyContext elementBody() {
		ElementBodyContext _localctx = new ElementBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_elementBody);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TSemicolon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; emptyElementBody();
				}
				break;
			case TOpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; childElementsBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyElementBodyContext : ParserRuleContext {
		public ITerminalNode TSemicolon() { return GetToken(SeleniumUIParser.TSemicolon, 0); }
		public EmptyElementBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyElementBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterEmptyElementBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitEmptyElementBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyElementBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyElementBodyContext emptyElementBody() {
		EmptyElementBodyContext _localctx = new EmptyElementBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_emptyElementBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChildElementsBodyContext : ParserRuleContext {
		public ITerminalNode TOpenBrace() { return GetToken(SeleniumUIParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SeleniumUIParser.TCloseBrace, 0); }
		public ChildElementContext[] childElement() {
			return GetRuleContexts<ChildElementContext>();
		}
		public ChildElementContext childElement(int i) {
			return GetRuleContext<ChildElementContext>(i);
		}
		public ChildElementsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_childElementsBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterChildElementsBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitChildElementsBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChildElementsBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChildElementsBodyContext childElementsBody() {
		ChildElementsBodyContext _localctx = new ChildElementsBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_childElementsBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(TOpenBrace);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LIdentifier) {
				{
				{
				State = 101; childElement();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChildElementContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ElementBodyContext elementBody() {
			return GetRuleContext<ElementBodyContext>(0);
		}
		public ElementTypeSpecifierContext elementTypeSpecifier() {
			return GetRuleContext<ElementTypeSpecifierContext>(0);
		}
		public HtmlTagLocatorSpecifierContext htmlTagLocatorSpecifier() {
			return GetRuleContext<HtmlTagLocatorSpecifierContext>(0);
		}
		public ChildElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_childElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterChildElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitChildElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChildElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChildElementContext childElement() {
		ChildElementContext _localctx = new ChildElementContext(Context, State);
		EnterRule(_localctx, 24, RULE_childElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 109; elementTypeSpecifier();
				}
				break;
			}
			State = 112; name();
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAssign) {
				{
				State = 113; htmlTagLocatorSpecifier();
				}
			}

			State = 116; elementBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementTypeSpecifierContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public ElementTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementTypeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterElementTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitElementTypeSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementTypeSpecifierContext elementTypeSpecifier() {
		ElementTypeSpecifierContext _localctx = new ElementTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_elementTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagLocatorSpecifierContext : ParserRuleContext {
		public ITerminalNode TAssign() { return GetToken(SeleniumUIParser.TAssign, 0); }
		public HtmlTagSpecifierContext htmlTagSpecifier() {
			return GetRuleContext<HtmlTagSpecifierContext>(0);
		}
		public LocatorSpecifierContext locatorSpecifier() {
			return GetRuleContext<LocatorSpecifierContext>(0);
		}
		public HtmlTagLocatorSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTagLocatorSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterHtmlTagLocatorSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitHtmlTagLocatorSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlTagLocatorSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagLocatorSpecifierContext htmlTagLocatorSpecifier() {
		HtmlTagLocatorSpecifierContext _localctx = new HtmlTagLocatorSpecifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_htmlTagLocatorSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(TAssign);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOpenBracket) {
				{
				State = 121; htmlTagSpecifier();
				}
			}

			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LRegularString) | (1L << LDoubleQuoteVerbatimString) | (1L << LSingleQuoteVerbatimString))) != 0)) {
				{
				State = 124; locatorSpecifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagSpecifierContext : ParserRuleContext {
		public ITerminalNode TOpenBracket() { return GetToken(SeleniumUIParser.TOpenBracket, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode TCloseBracket() { return GetToken(SeleniumUIParser.TCloseBracket, 0); }
		public HtmlTagSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTagSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterHtmlTagSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitHtmlTagSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlTagSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagSpecifierContext htmlTagSpecifier() {
		HtmlTagSpecifierContext _localctx = new HtmlTagSpecifierContext(Context, State);
		EnterRule(_localctx, 30, RULE_htmlTagSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(TOpenBracket);
			State = 128; @string();
			State = 129; Match(TCloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocatorSpecifierContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public LocatorSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locatorSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterLocatorSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitLocatorSpecifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocatorSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocatorSpecifierContext locatorSpecifier() {
		LocatorSpecifierContext _localctx = new LocatorSpecifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_locatorSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; @string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public QualifierContext qualifier() {
			return GetRuleContext<QualifierContext>(0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_qualifiedName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 36, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] TDot() { return GetTokens(SeleniumUIParser.TDot); }
		public ITerminalNode TDot(int i) {
			return GetToken(SeleniumUIParser.TDot, i);
		}
		public QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitQualifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifierContext qualifier() {
		QualifierContext _localctx = new QualifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; identifier();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TDot) {
				{
				{
				State = 138; Match(TDot);
				State = 139; identifier();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode LIdentifier() { return GetToken(SeleniumUIParser.LIdentifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(LIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode LRegularString() { return GetToken(SeleniumUIParser.LRegularString, 0); }
		public ITerminalNode LDoubleQuoteVerbatimString() { return GetToken(SeleniumUIParser.LDoubleQuoteVerbatimString, 0); }
		public ITerminalNode LSingleQuoteVerbatimString() { return GetToken(SeleniumUIParser.LSingleQuoteVerbatimString, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUIParserListener typedListener = listener as ISeleniumUIParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUIParserVisitor<TResult> typedVisitor = visitor as ISeleniumUIParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 42, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LRegularString) | (1L << LDoubleQuoteVerbatimString) | (1L << LSingleQuoteVerbatimString))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\x98', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\a', 
		'\x2', '\x30', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x33', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '=', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '@', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x46', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'L', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'U', '\n', '\b', '\x3', '\b', '\x5', 
		'\b', 'X', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\x63', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', 'i', '\n', '\r', '\f', '\r', '\xE', '\r', 'l', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x5', '\xE', 'q', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'u', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '}', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x80', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', 
		'\x15', '\x8F', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x92', '\v', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x2', '\x2', '\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '\x2', '\x4', '\x3', '\x2', '\x6', '\a', '\x4', 
		'\x2', '\x1B', '\x1B', '\"', '#', '\x2', '\x8E', '\x2', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x36', '\x3', '\x2', '\x2', '\x2', '\x6', 
		':', '\x3', '\x2', '\x2', '\x2', '\b', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'G', '\x3', '\x2', '\x2', '\x2', '\f', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'Q', '\x3', '\x2', '\x2', '\x2', '\x10', '[', '\x3', '\x2', 
		'\x2', '\x2', '\x12', ']', '\x3', '\x2', '\x2', '\x2', '\x14', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x66', '\x3', '\x2', '\x2', '\x2', '\x1A', 'p', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', 'x', '\x3', '\x2', '\x2', '\x2', '\x1E', 'z', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x81', '\x3', '\x2', '\x2', '\x2', '\"', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x87', '\x3', '\x2', '\x2', '\x2', '&', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '(', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '*', '\x93', '\x3', '\x2', '\x2', '\x2', ',', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x30', '\x5', '\x4', '\x3', '\x2', '/', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\a', '\x2', '\x2', '\x3', '\x35', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '\x5', '\x2', 
		'\x2', '\x37', '\x38', '\x5', '$', '\x13', '\x2', '\x38', '\x39', '\x5', 
		'\x6', '\x4', '\x2', '\x39', '\x5', '\x3', '\x2', '\x2', '\x2', ':', '>', 
		'\a', '\x12', '\x2', '\x2', ';', '=', '\x5', '\b', '\x5', '\x2', '<', 
		';', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', '\x2', 
		'>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x41', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\x13', '\x2', '\x2', '\x42', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x46', '\x5', '\n', '\x6', '\x2', '\x44', 
		'\x46', '\x5', '\xE', '\b', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\a', '\b', '\x2', '\x2', 'H', 'I', '\x5', 
		'\f', '\a', '\x2', 'I', 'K', '\x5', '&', '\x14', '\x2', 'J', 'L', '\x5', 
		'\x1E', '\x10', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'K', 'L', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 
		'N', '\a', '\t', '\x2', '\x2', 'N', '\v', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x5', '(', '\x15', '\x2', 'P', '\r', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\x5', '\x10', '\t', '\x2', 'R', 'T', '\x5', '&', '\x14', '\x2', 
		'S', 'U', '\x5', '\x12', '\n', '\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 
		'V', 'X', '\x5', '\x1E', '\x10', '\x2', 'W', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x5', '\x14', '\v', '\x2', 'Z', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\t', '\x2', '\x2', '\x2', '\\', '\x11', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\a', '\n', '\x2', '\x2', '^', '_', '\x5', 
		'(', '\x15', '\x2', '_', '\x13', '\x3', '\x2', '\x2', '\x2', '`', '\x63', 
		'\x5', '\x16', '\f', '\x2', '\x61', '\x63', '\x5', '\x18', '\r', '\x2', 
		'\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x15', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\a', '\t', '\x2', '\x2', '\x65', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'j', '\a', '\x12', '\x2', '\x2', 'g', 'i', '\x5', '\x1A', '\xE', 
		'\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', '\x13', '\x2', '\x2', 'n', '\x19', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'q', '\x5', '\x1C', '\xF', '\x2', 'p', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'r', 't', '\x5', '&', '\x14', '\x2', 's', 'u', '\x5', 
		'\x1E', '\x10', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 't', 'u', 
		'\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 
		'w', '\x5', '\x14', '\v', '\x2', 'w', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\x5', '(', '\x15', '\x2', 'y', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', 'z', '|', '\a', '\r', '\x2', '\x2', '{', '}', '\x5', ' ', '\x11', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x7F', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x5', '\"', 
		'\x12', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\a', '\x10', '\x2', '\x2', '\x82', '\x83', '\x5', ',', 
		'\x17', '\x2', '\x83', '\x84', '\a', '\x11', '\x2', '\x2', '\x84', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x5', ',', '\x17', '\x2', 
		'\x86', '#', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x5', '(', '\x15', 
		'\x2', '\x88', '%', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x5', 
		'*', '\x16', '\x2', '\x8A', '\'', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x90', '\x5', '*', '\x16', '\x2', '\x8C', '\x8D', '\a', '\v', '\x2', 
		'\x2', '\x8D', '\x8F', '\x5', '*', '\x16', '\x2', '\x8E', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x91', ')', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\x17', '\x2', '\x2', '\x94', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\t', '\x3', '\x2', '\x2', 
		'\x96', '-', '\x3', '\x2', '\x2', '\x2', '\xF', '\x31', '>', '\x45', 'K', 
		'T', 'W', '\x62', 'j', 'p', 't', '|', '\x7F', '\x90',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DevToolsX.Documents.Compilers.SeleniumUI.Syntax.InternalSyntax

