//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SeleniumUserInterfaceParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DevToolsX.Documents.Compilers.SeleniumUserInterface.Syntax.InternalSyntax {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class SeleniumUserInterfaceParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KParent=1, KAncestor=2, KPage=3, KElement=4, KInput=5, KImage=6, KLink=7, 
		KForm=8, KLabel=9, KCheckBox=10, KTextField=11, KTextArea=12, KButton=13, 
		KRadioGroup=14, KRadioButton=15, KList=16, KTable=17, TSemicolon=18, TColon=19, 
		TDot=20, TComma=21, TAssign=22, TOpenParen=23, TCloseParen=24, TOpenBracket=25, 
		TCloseBracket=26, TOpenBrace=27, TCloseBrace=28, TLessThan=29, TGreaterThan=30, 
		TQuestion=31, Identifier=32, LInteger=33, LDecimal=34, LScientific=35, 
		LRegularString=36, LUtf8Bom=37, LWhiteSpace=38, LCrLf=39, LLineEnd=40, 
		LSingleLineComment=41, LComment=42, LDoubleQuoteVerbatimString=43, LSingleQuoteVerbatimString=44, 
		DoubleQuoteVerbatimStringLiteralStart=45, SingleQuoteVerbatimStringLiteralStart=46, 
		LCommentStart=47, LComment_Star=48;
	public const int
		RULE_main = 0, RULE_page = 1, RULE_name = 2;
	public static readonly string[] ruleNames = {
		"main", "page", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'parent'", "'ancestor'", "'page'", "'element'", "'input'", "'image'", 
		"'link'", "'form'", "'label'", "'checkbox'", "'text-field'", "'text-area'", 
		"'button'", "'radio-group'", "'radio-button'", "'list'", "'table'", "';'", 
		"':'", "'.'", "','", "'='", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"'<'", "'>'", "'?'", null, null, null, null, null, null, null, null, null, 
		null, null, "'\"'", "'''", "'@\"'", "'@''", "'/*'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KParent", "KAncestor", "KPage", "KElement", "KInput", "KImage", 
		"KLink", "KForm", "KLabel", "KCheckBox", "KTextField", "KTextArea", "KButton", 
		"KRadioGroup", "KRadioButton", "KList", "KTable", "TSemicolon", "TColon", 
		"TDot", "TComma", "TAssign", "TOpenParen", "TCloseParen", "TOpenBracket", 
		"TCloseBracket", "TOpenBrace", "TCloseBrace", "TLessThan", "TGreaterThan", 
		"TQuestion", "Identifier", "LInteger", "LDecimal", "LScientific", "LRegularString", 
		"LUtf8Bom", "LWhiteSpace", "LCrLf", "LLineEnd", "LSingleLineComment", 
		"LComment", "LDoubleQuoteVerbatimString", "LSingleQuoteVerbatimString", 
		"DoubleQuoteVerbatimStringLiteralStart", "SingleQuoteVerbatimStringLiteralStart", 
		"LCommentStart", "LComment_Star"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SeleniumUserInterfaceParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SeleniumUserInterfaceParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SeleniumUserInterfaceParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SeleniumUserInterfaceParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class MainContext : ParserRuleContext {
		public PageContext page() {
			return GetRuleContext<PageContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SeleniumUserInterfaceParser.Eof, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUserInterfaceParserListener typedListener = listener as ISeleniumUserInterfaceParserListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUserInterfaceParserListener typedListener = listener as ISeleniumUserInterfaceParserListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUserInterfaceParserVisitor<TResult> typedVisitor = visitor as ISeleniumUserInterfaceParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; page();
			State = 7; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PageContext : ParserRuleContext {
		public ITerminalNode KPage() { return GetToken(SeleniumUserInterfaceParser.KPage, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode TOpenBrace() { return GetToken(SeleniumUserInterfaceParser.TOpenBrace, 0); }
		public ITerminalNode TCloseBrace() { return GetToken(SeleniumUserInterfaceParser.TCloseBrace, 0); }
		public PageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_page; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUserInterfaceParserListener typedListener = listener as ISeleniumUserInterfaceParserListener;
			if (typedListener != null) typedListener.EnterPage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUserInterfaceParserListener typedListener = listener as ISeleniumUserInterfaceParserListener;
			if (typedListener != null) typedListener.ExitPage(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUserInterfaceParserVisitor<TResult> typedVisitor = visitor as ISeleniumUserInterfaceParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PageContext page() {
		PageContext _localctx = new PageContext(Context, State);
		EnterRule(_localctx, 2, RULE_page);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9; Match(KPage);
			State = 10; name();
			State = 11; Match(TOpenBrace);
			State = 12; Match(TCloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(SeleniumUserInterfaceParser.Identifier, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISeleniumUserInterfaceParserListener typedListener = listener as ISeleniumUserInterfaceParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISeleniumUserInterfaceParserListener typedListener = listener as ISeleniumUserInterfaceParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISeleniumUserInterfaceParserVisitor<TResult> typedVisitor = visitor as ISeleniumUserInterfaceParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 4, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\x13', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x2', '\x2', '\x5', 
		'\x2', '\x4', '\x6', '\x2', '\x2', '\x2', '\xF', '\x2', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\v', '\x3', '\x2', '\x2', '\x2', '\x6', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\t', '\x5', '\x4', '\x3', '\x2', '\t', 
		'\n', '\a', '\x2', '\x2', '\x3', '\n', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\f', '\a', '\x5', '\x2', '\x2', '\f', '\r', '\x5', '\x6', '\x4', 
		'\x2', '\r', '\xE', '\a', '\x1D', '\x2', '\x2', '\xE', '\xF', '\a', '\x1E', 
		'\x2', '\x2', '\xF', '\x5', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', 
		'\a', '\"', '\x2', '\x2', '\x11', '\a', '\x3', '\x2', '\x2', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DevToolsX.Documents.Compilers.SeleniumUserInterface.Syntax.InternalSyntax

